[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Corces Lab @ Gladstone Institutes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/CHOIR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"CHOIR","text":"CHOIR designed run Unix-based operating systems macOS linux. CHOIR installation currently requires remotes BiocManager installation GitHub Bioconductor packages. Run following commands install various dependencies used CHOIR: First, install remotes (installing GitHub packages) isn’t already installed: , install BiocManager (installing bioconductor packages) isn’t already installed: , install CHOIR:","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) install.packages(\"remotes\") if (!requireNamespace(\"BiocManager\", quietly = TRUE)) install.packages(\"BiocManager\") remotes::install_github(\"corceslab/CHOIR\", ref=\"main\", repos = BiocManager::repositories(), upgrade = \"never\")"},{"path":"/articles/CHOIR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"CHOIR","text":"vignette provides basic example run CHOIR, clustering algorithm single-cell data. CHOIR applicable single-cell data modality, including RNA, ATAC, proteomics. also applicable multi-modal data (see Advanced Options). Detailed parameter definitions available Functions tab. CHOIR based premise clusters contain biologically different cell types states, machine learning classifier considers features present cells cluster able distinguish clusters higher level accuracy machine learning classifiers trained randomly permuted cluster labels. use permutation testing approaches allows CHOIR introduce statistical significance thresholds clustering process. CHOIR proceeds two main steps. First, CHOIR generates hierarchical clustering tree spanning network structure data initial “partition” cells cluster partition cells demonstrably overclustered. , CHOIR applies permutation testing approach using random forest classifiers across nodes hierarchical clustering tree determine appropriate extent branch clustering tree, final clusters represent statistically distinct populations. ’ll need following packages installed run tutorial:","code":"if (!requireNamespace(\"scRNAseq\", quietly = TRUE)) BiocManager::install(\"scRNAseq\") library(scRNAseq) library(Seurat) library(CHOIR)"},{"path":"/articles/CHOIR.html","id":"example-data","dir":"Articles","previous_headings":"Introduction","what":"Example data","title":"CHOIR","text":"demonstrate run CHOIR single-cell RNA-seq dataset, ’ll use small dataset consisting mouse dopaminergic neurons, originating experiment La Manno et al. (2016), available Bioconductor package scRNAseq.","code":"data_matrix <- LaMannoBrainData('mouse-adult')@assays@data$counts colnames(data_matrix) <- seq(1:ncol(data_matrix))"},{"path":"/articles/CHOIR.html","id":"pre-processing","dir":"Articles","previous_headings":"Introduction","what":"Pre-processing","title":"CHOIR","text":"CHOIR takes input Seurat, SingleCellExperiment, ArchR object containing one feature matrices. Input data already undergone appropriate quality control normalization steps (unless using SCTransform, see Advanced Options). Note exact pre-processing steps used user. tutorial uses Seurat object; details related object types, see Advanced Options. First, create Seurat object using read count matrix. simplicity, ’ll just exclude cells fewer 100 reads genes present less 5 cells. now run log normalization.","code":"object <- CreateSeuratObject(data_matrix,                               min.features = 100,                              min.cells = 5) object <- NormalizeData(object)"},{"path":"/articles/CHOIR.html","id":"running-choir","dir":"Articles","previous_headings":"","what":"Running CHOIR","title":"CHOIR","text":"CHOIR proceeds two main steps: CHOIR generates hierarchical clustering tree. CHOIR prunes tree iterative application permutation testing approach. two steps can run together using function CHOIR() separately using functions buildTree() pruneTree().","code":""},{"path":"/articles/CHOIR.html","id":"quick-start","dir":"Articles","previous_headings":"Running CHOIR","what":"Quick start:","title":"CHOIR","text":"CHOIR() function run steps CHOIR algorithm sequence. CHOIR highly parallelized, efficiency greatly improves n_cores increased. default significance level used CHOIR alpha = 0.05 Bonferroni multiple comparison correction. correction methods may less conservative, CHOIR applies filters reduce total number tests performed (see Advanced Options). recommend using default value alpha = 0.05 Bonferroni multiple comparison correction. conservative approach, alpha value decreased 0.01 0.001. data multiple batches, highly recommend using CHOIR’s built-batch correction, using batch_correction_method batch_labels parameters (see Advanced Options). use separate “count split” input matrices building vs. pruning clustering tree, set countsplit = TRUE provide matrix suffixes countsplit_suffix (see Advanced Options details).","code":"object <- CHOIR(object,                  n_cores = 2)"},{"path":"/articles/CHOIR.html","id":"step-by-step","dir":"Articles","previous_headings":"Running CHOIR","what":"Step-by-step:","title":"CHOIR","text":"Alternately, can run two main steps CHOIR individually. users already set clusters generated different tool, wish assess whether clusters - -clustered, start Step 2 (see Advanced Options).","code":""},{"path":"/articles/CHOIR.html","id":"step-1-generate-hierarchical-clustering-tree","dir":"Articles","previous_headings":"Running CHOIR > Step-by-step:","what":"Step 1: Generate hierarchical clustering tree","title":"CHOIR","text":"CHOIR generates hierarchical clustering tree computing dimensionality reduction nearest neighbor adjacency matrices data, computing clusters across series sampled resolutions, reconciling clustering results consensus clustering tree using package MRtree. using default parameter max_clusters = \"auto\", CHOIR applies series subclustering steps ensure tree underclustered. Specifically, silhouette score assessed new level emerging tree. silhouette score maximized, cluster level subset, new dimensionality reduction generated, cluster subclustered. subtrees continues subdivided farthest pair nearest neighboring clusters found overclustered using permutation test approach. user can determine method used dimensionality reduction batch correction, well supply specific parameters dimensionality reduction, batch correction, detecting nearest neighbors, modularity-based clustering, needed. data multiple batches, highly recommend using CHOIR’s built-batch correction, using batch_correction_method batch_labels parameters (see Advanced Options). , build hierarchical clustering tree using default parameter settings.","code":"object <- buildTree(object,                     n_cores = 2) #> 2025-01-20 13:23:49 : (Step 1/7) Checking inputs and preparing object.. #>  #> Input data: #>  - Object type: Seurat (v5) #>  - # of cells: 243 #>  - # of batches: 1 #>  - # of modalities: 1 #>  - ATAC data: FALSE #>  - Countsplitting: FALSE #>  - Assay: RNA #>  - Layer used to build tree: data #>  - Layer used to prune tree: data #>  #> Proceeding with the following parameters: #>  - Intermediate data stored under key: CHOIR #>  - Alpha: 0.05 #>  - Multiple comparison adjustment: bonferroni #>  - Features to train RF: var #>  - # of excluded features: 0 #>  - # of permutations: 100 #>  - # of RF trees: 50 #>  - Use variance: TRUE #>  - Minimum accuracy: 0.5 #>  - Minimum connections: 1 #>  - Maximum repeated errors: 20 #>  - Distance approximation: TRUE #>  - Maximum cells sampled: Inf #>  - Downsampling rate: 0.5 #>  - Minimum reads: >0 reads #>  - Maximum clusters: auto #>  - Minimum cluster depth: 2000 #>  - Normalization method: none #>  - Subtree dimensionality reductions: TRUE #>  - Dimensionality reduction method: Default #>  - Dimensionality reduction parameters provided: No #>  - # of variable features: Default #>  - Batch correction method: none #>  - Batch correction parameters provided: No #>  - Nearest neighbor parameters provided:  #>      - verbose: FALSE #>  - Clustering parameters provided:  #>      - algorithm: 1 #>      - group.singletons: TRUE #>      - verbose: FALSE #>  - # of cores: 2 #>  - Random seed: 1 #> 2025-01-20 13:23:49 : (Step 2/7) Running initial dimensionality reduction.. #> 2025-01-20 13:23:49 : Preparing matrix using 'RNA' assay and 'data' slot.. #> 2025-01-20 13:23:50 : Running PCA with 2000 variable features.. #> 2025-01-20 13:23:50 : (Step 3/7) Generating initial nearest neighbors graph.. #> 2025-01-20 13:23:50 : (Step 4/7) Identify starting clustering resolution.. #>                       Starting resolution: 0.4 #> 2025-01-20 13:23:50 : (Step 5/7) Building root clustering tree.. #>  #>  #>                       Identified 3 clusters in root tree. #> 2025-01-20 13:23:50 : (Step 6/7) Subclustering root tree.. #> 2025-01-20 13:23:51 : 5% (Subtree 1/3, 112 cells), 3 total clusters. #> 2025-01-20 13:23:51 : 44% (Subtree 1/3, 112 cells), 5 total clusters. #> 2025-01-20 13:23:52 : 50% (Subtree 2/3, 84 cells), 5 total clusters. #> 2025-01-20 13:23:52 : 51% (Subtree 2/3, 84 cells), 5 total clusters. #> 2025-01-20 13:23:52 : 79% (Subtree 2/3, 84 cells), 7 total clusters. #> 2025-01-20 13:23:52 : 81% (Subtree 2/3, 84 cells), 7 total clusters. #> 2025-01-20 13:23:53 : 83% (Subtree 3/3, 47 cells), 7 total clusters. #> 2025-01-20 13:23:54 : 99% (Subtree 3/3, 47 cells), 11 total clusters. #>  #> 2025-01-20 13:23:54 : (Step 7/7) Compiling full clustering tree.. #>                       Full tree has 6 levels and 8 clusters."},{"path":"/articles/CHOIR.html","id":"step-2-prune-hierarchical-clustering-tree","dir":"Articles","previous_headings":"Running CHOIR > Step-by-step:","what":"Step 2: Prune hierarchical clustering tree","title":"CHOIR","text":"constructing hierarchical clustering tree, CHOIR iterates node clustering tree using bottom-approach. node, CHOIR computes pairwise comparisons child clusters splitting cells training test sets, training balanced random forest classifier gene expression data training set, predicting cluster assignments cells test set. yields prediction accuracy score represents degree two clusters distinguishable. parallel, CHOIR shuffles cluster labels repeats process. comparisons repeated using bootstrapped samples (default = 100 iterations), resulting permutation test compares true prediction accuracy clusters prediction accuracy chance division cells two random groups. permutation test yields p-value determines whether clusters slated merge remain separate. significance threshold used can adjusted using alpha parameter. recommend using default value alpha = 0.05 Bonferroni multiple comparison correction. conservative approach, alpha value decreased 0.01 0.001.","code":"object <- pruneTree(object,                      n_cores = 2) #> 2025-01-20 13:23:54 : (Step 1/2) Checking inputs and preparing object.. #>  #> Input data: #>  - Object type: Seurat #>  - # of cells: 243 #>  - # of batches: 1 #>  - # of modalities: 1 #>  - # of subtrees: 4 #>  - # of levels: 6 #>  - # of starting clusters: 8 #>  - Countsplitting: FALSE #>  - Assay: RNA #>  - Layer used to build tree: data #>  - Layer used to prune tree: data #>  #> Proceeding with the following parameters: #>  - Intermediate data stored under key: CHOIR #>  - Alpha: 0.05 #>  - Multiple comparison adjustment: bonferroni #>  - Features to train RF: var #>  - # of excluded features: 0 #>  - # of permutations: 100 #>  - # of RF trees: 50 #>  - Use variance: TRUE #>  - Minimum accuracy: 0.5 #>  - Minimum connections: 1 #>  - Maximum repeated errors: 20 #>  - Distance approximation: TRUE #>  - Distance awareness: 2 #>  - All metrics collected: FALSE #>  - Maximum cells sampled: Inf #>  - Downsampling rate: 0.5 #>  - Minimum reads: >0 reads #>  - Normalization method: none #>  - Batch correction method: none #>  - Clustering parameters provided:  #>      - algorithm: 1 #>      - group.singletons: TRUE #>      - verbose: FALSE #>  - # of cores: 2 #>  - Random seed: 1 #> 2025-01-20 13:23:54 : (Step 2/2) Iterating through clustering tree.. #> 2025-01-20 13:23:54 : 10% (1/6 levels) in 0 min. 8 clusters remaining. #> 2025-01-20 13:23:54 : 20% (2/6 levels) in 0 min. 7 clusters remaining. #> 2025-01-20 13:23:54 : 30% (2/6 levels) in 0.01 min. 6 clusters remaining. #> 2025-01-20 13:23:55 : 40% (3/6 levels) in 0.02 min. 5 clusters remaining. #> 2025-01-20 13:23:56 : 52% (4/6 levels) in 0.03 min. 4 clusters remaining. #> 2025-01-20 13:23:56 : 61% (4/6 levels) in 0.03 min. 4 clusters remaining. #> 2025-01-20 13:23:58 : 71% (5/6 levels) in 0.07 min. 4 clusters remaining. #> 2025-01-20 13:23:58 : 80% (6/6 levels) in 0.07 min. 4 clusters remaining. #> 2025-01-20 13:23:58 : 92% (6/6 levels) in 0.07 min. 4 clusters remaining. #> 2025-01-20 13:23:58 : Completed: all clusters compared. #>  #>  #> 2025-01-20 13:23:58 : Identified 4 clusters."},{"path":"/articles/CHOIR.html","id":"plot","dir":"Articles","previous_headings":"Running CHOIR","what":"Plot","title":"CHOIR","text":"Labels final clusters identified CHOIR can found meta.data slot Seurat object. CHOIR outputs stored misc slot Seurat object. clustering finished, can generate UMAP dimensionality reduction use function plotCHOIR() plot visualization clusters.  function also overlay prediction accuracy scores among neighboring pairs clusters accuracy_scores set TRUE.","code":"head(object@meta.data) #>      orig.ident nCount_RNA nFeature_RNA CHOIR_clusters_0.05 #> 1 SeuratProject       7826         3314                   1 #> 2 SeuratProject       3294         1895                   2 #> 3 SeuratProject       6776         3002                   1 #> 4 SeuratProject       7294         3192                   2 #> 5 SeuratProject       3747         1993                   2 #> 6 SeuratProject      11258         4363                   2 # Run UMAP object <- runCHOIRumap(object,                        reduction = \"P0_reduction\") #> Calculating UMAP embeddings for 1 dimensionality reductions.. #> (1/1) #> Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric #> To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation' #> This message will be shown once per session #> 13:23:58 UMAP embedding parameters a = 0.9922 b = 1.112 #> Found more than one class \"dist\" in cache; using the first, from namespace 'BiocGenerics' #> Also defined by 'spam' #> 13:23:58 Read 243 rows and found 50 numeric columns #> 13:23:58 Using Annoy for neighbor search, n_neighbors = 30 #> Found more than one class \"dist\" in cache; using the first, from namespace 'BiocGenerics' #> Also defined by 'spam' #> 13:23:58 Building Annoy index with metric = cosine, n_trees = 50 #> 0%   10   20   30   40   50   60   70   80   90   100% #> [----|----|----|----|----|----|----|----|----|----| #> **************************************************| #> 13:23:58 Writing NN index file to temp file /var/folders/ty/d3bmlyq53cv_6t3v60wkfr980000gr/T//Rtmp6wiqqA/file7f475c9ad35b #> 13:23:58 Searching Annoy index using 1 thread, search_k = 3000 #> 13:23:58 Annoy recall = 100% #> 13:23:59 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30 #> 13:24:00 Initializing from normalized Laplacian + noise (using RSpectra) #> 13:24:00 Commencing optimization for 500 epochs, with 9286 positive edges #> 13:24:00 Optimization finished #> Warning: No assay specified, setting assay as RNA by default. # Plot plotCHOIR(object) #> Warning: Data is of class matrix. Coercing to dgCMatrix. plotCHOIR(object,           accuracy_scores = TRUE,           plot_nearest = FALSE) #> Warning: Data is of class matrix. Coercing to dgCMatrix."},{"path":[]},{"path":[]},{"path":"/articles/CHOIR.html","id":"seurat","dir":"Articles","previous_headings":"Advanced Options > Input object types","what":"Seurat","title":"CHOIR","text":"Seurat objects, default assay used input provided parameter use_assay. input provided parameter use_slot, following default slot (Seurat v4) layer (Seurat v5) used: use_assay either “RNA” “sketch”, CHOIR look data slot use_assay either “SCT” “integrated”, CHOIR look scale.data slot Seurat v5 objects multiple layers (e.g., “data.1”, “data.2”, “data.2”..) different subsets cells stored assay. Currently, CHOIR requires single layer containing cells assay. cases, please re-organize Seurat object prior running CHOIR. default dimensionality reduction method Seurat objects “PCA”, except case ATAC-seq data, “LSI”. like use SCTransform normalization rather log normalization, please provide raw counts set parameter normalization_method = \"SCTransform\". Note SCTransform thoroughly tested CHOIR. Labels final clusters identified CHOIR can found meta.data slot Seurat object. CHOIR outputs stored misc slot Seurat object.","code":""},{"path":"/articles/CHOIR.html","id":"singlecellexperiment","dir":"Articles","previous_headings":"Advanced Options > Input object types","what":"SingleCellExperiment","title":"CHOIR","text":"SingleCellExperiment objects, use_assay parameter needed. provided, set “logcounts”. Please ensure relevant assay matrix includes row column names. default dimensionality reduction method SingleCellExperiment objects “PCA”, except case ATAC-seq data, “LSI”. Labels final clusters identified CHOIR can found colData slot SingleCellExperiment object. CHOIR outputs stored metadata.","code":""},{"path":"/articles/CHOIR.html","id":"archr","dir":"Articles","previous_headings":"Advanced Options > Input object types","what":"ArchR","title":"CHOIR","text":"ArchR objects, input provided parameter ArchR_matrix, “GeneScoreMatrix” used. input parameter ArchR_depthcol provided, “nFrags” used. default dimensionality reduction method ArchR objects “IterativeLSI”. Labels final clusters identified CHOIR can found cellColData slot ArchR object. CHOIR outputs stored projectMetadata.","code":""},{"path":[]},{"path":"/articles/CHOIR.html","id":"batch-correction","dir":"Articles","previous_headings":"Advanced Options > CHOIR parameters","what":"Batch correction","title":"CHOIR","text":"datasets multiple batches, recommended apply Harmony batch correction CHOIR setting parameter batch_correction_method = \"Harmony\". generates Harmony-corrected dimensionality reductions, ensures random forest classifer comparisons batch-aware. Provide name cell metadata column containing batch information parameter batch_labels. Use caution applying method groups interest (e.g., disease vs. control) batch-confounded expect cell types unique groups. example command run CHOIR batch correction:","code":"object <- CHOIR(object,                  batch_correction_method = \"Harmony\",                 batch_labels = \"Batch\") # Change 'Batch' to corresponding cell metadata column for your data"},{"path":"/articles/CHOIR.html","id":"significance-level-multiple-comparison-correction","dir":"Articles","previous_headings":"Advanced Options > CHOIR parameters","what":"Significance level & multiple comparison correction","title":"CHOIR","text":"default significance level used CHOIR alpha = 0.05 Bonferroni multiple comparison correction. correction methods may less conservative, CHOIR applies filters reduce total number tests performed (see ). recommend using default value alpha = 0.05 Bonferroni multiple comparison correction. conservative approach, alpha value decreased 0.01 0.001.","code":""},{"path":"/articles/CHOIR.html","id":"filters","dir":"Articles","previous_headings":"Advanced Options > CHOIR parameters","what":"Filters","title":"CHOIR","text":"CHOIR uses various filters reduce number necessary permutation test comparisons: Parameter min_accuracy indicates minimum accuracy random forest classifier predictions, clusters automatically merged. defaults 0.5, higher values identify conservative set clusters. Parameter min_connections indicates minimum number nearest neighbors two clusters considered ‘adjacent’. non-zero, non-adjacent clusters never merged. Defaults 1. Parameter max_repeat_errors used account situations random forest classifier prediction errors concentrated among cells repeatedly misassigned (often doublets outliers). non-zero, repeated errors evaluated accuracy scores modified number repeated errors value max_repeat_errors. Defaults 20. Parameter distance_awareness represents distance threshold cluster merge another cluster. Specifically, value multiplier applied distance cluster closest distinguishable neighbor; product sets threshold subsequent comparisons. default value sets threshold 2-fold increase distance.","code":""},{"path":"/articles/CHOIR.html","id":"downsampling","dir":"Articles","previous_headings":"Advanced Options > CHOIR parameters","what":"Downsampling","title":"CHOIR","text":"CHOIR uses downsampling increase efficiency larger datasets. Using default parameter setting downsampling_rate = \"auto\", downsampling occurs random forest classifer comparison. downsampling rate determined based overall dataset size. disable downsampling, set downsampling_rate = 1. datasets require batch correction across many batches, recommend setting downsampling_rate = 1. Additional downsampling can imposed using parameter sample_max, indicating maximum number cells used per cluster train/test random forest classifier. default, used.","code":""},{"path":"/articles/CHOIR.html","id":"providing-pre-generated-clusters","dir":"Articles","previous_headings":"Advanced Options","what":"Providing pre-generated clusters","title":"CHOIR","text":"Users already set clusters generated different tool can use CHOIR assess whether clusters - -clustered using pruneTree() function. clustering tree pre-generated user, provided parameter cluster_tree. , run CHOIR function inferTree(), generates simple hierarchical clustering tree set clusters based distances provided dimensionality reduction. pruneTree(), provide: object input object results stored. cluster_tree dataframe containing cluster IDs cell across levels hierarchical clustering tree. input_matrix matrix containing feature x cell data train random forest classifiers. nn_matrix matrix containing nearest neighbor adjacency cells. Either reduction (matrix dimensionality reduction cell embeddings) using approximate distances dist_matrix (distance matrix cell cell distances)","code":""},{"path":"/articles/CHOIR.html","id":"using-choir-with-atac-seq-data","dir":"Articles","previous_headings":"Advanced Options","what":"Using CHOIR with ATAC-seq data","title":"CHOIR","text":"input data ATAC-seq data, make sure set input parameter atac = TRUE, order use correct defaults. example, CHOIR uses 25000 variable features default ATAC-seq data, comparison 2000 default data. data exclusively contains ATAC-seq data (modalities), recommended set parameter use_variance = FALSE. CHOIR compatible ArchR Signac approaches ATAC-seq analysis, thoroughly tested ArchR objects. example command run CHOIR ATAC-seq data:","code":"ArchR_object <- CHOIR(ArchR_object,                       atac = TRUE,                       use_variance = FALSE)"},{"path":"/articles/CHOIR.html","id":"using-choir-with-multi-modal-data","dir":"Articles","previous_headings":"Advanced Options","what":"Using CHOIR with multi-modal data","title":"CHOIR","text":"providing input data contains multiple modalities cell, RNA + ATAC multiome data, must provide multiple values (vector) parameters use_assay use_slot (Seurat objects), use_assay (SingleCellExperiment objects), ArchR_matrix ArchR_depthcol ArchR objects. Please make sure object limited set shared cells among modalities, may encounter errors. want use different methods normalization, dimensionality reduction, number variable features, batch correction modality, input related parameters must also provided vectors lists one value per modality. CHOIR creates joint dimensionality reduction modalities uses provided feature matrices joint input train/test random forest classifiers. CHOIR’s approach distance approximation currently compatible multi-modal Seurat SingleCellExperiment objects. Thus, maximal efficiency, recommend using ArchR objects multi-modal analysis CHOIR. Alternately, distance approximation can disabled distance_approx = FALSE, may slow computation. example command run CHOIR joint RNA-seq ATAC-seq data:","code":"ArchR_object <- CHOIR(ArchR_object,                       ArchR_matrix = c(\"GeneScoreMatrix\", \"GeneExpressionMatrix\"),                       ArchR_depthcol = c(\"nFrags\", \"Gex_nUMI\"),                       atac = c(TRUE, FALSE))"},{"path":"/articles/CHOIR.html","id":"count-splitting","dir":"Articles","previous_headings":"Advanced Options","what":"Count splitting","title":"CHOIR","text":"Count splitting method developed Neufeld et al. (paper) split count matrix two matrices dimensions, avoid “double dipping” cross validation clusters. parameter countsplit = TRUE, CHOIR accepts count split input matrices. One matrix used calculate highly variable features, dimensionality reductions, nearest neighbor adjacency matrices, initial clustering tree. matrix exclusively used input random forest classifiers, order decide clusters merged. can take Seurat object run count splitting using following code, extract existing count matrix, run function countsplit::countsplit, store resulting matrices back object added suffixes (default “_1” “_2”). Use parameter normalization_method apply normalization store normalized count split matrices. CHOIR can run using resulting matrices. Alternately, users can provide count split matrices. must share prefix, provided use_slot Seurat objects use_assay SingleCellExperiment objects. unique suffixes provided countsplit_suffix character vector.","code":"object <- runCountSplit(object) #> 2025-01-20 13:24:01 : Checking inputs and preparing object.. #> 2025-01-20 13:24:01 : Fetching matrix 1 of 1.. #> 2025-01-20 13:24:01 : Preparing matrix using 'RNA' assay and 'counts' slot.. #> 2025-01-20 13:24:01 : Countsplitting matrix.. #> As no overdispersion parameters were provided, Poisson count splitting will be performed. #> 2025-01-20 13:24:01 : Storing countsplit matrices.. #> 2025-01-20 13:24:01 : Storing layer 'counts_1' under assay 'RNA' in Seurat object. #> 2025-01-20 13:24:01 : Storing layer 'counts_2' under assay 'RNA' in Seurat object. #> 2025-01-20 13:24:01 : Running log normalization on countsplit matrices.. #> 2025-01-20 13:24:01 : Storing normalized countsplit matrices.. #> 2025-01-20 13:24:01 : Storing layer 'counts_log_1' under assay 'RNA' in Seurat object. #> 2025-01-20 13:24:01 : Storing layer 'counts_log_2' under assay 'RNA' in Seurat object. object <- CHOIR(object,                  use_slot = \"counts_log\",                  countsplit = TRUE,                  n_cores = 2) #> ---------------------------------------- #> - CHOIR - Part 1: Build clustering tree #> ---------------------------------------- #> 2025-01-20 13:24:01 : (Step 1/7) Checking inputs and preparing object.. #>  #> Input data: #>  - Object type: Seurat (v5) #>  - # of cells: 243 #>  - # of batches: 1 #>  - # of modalities: 1 #>  - ATAC data: FALSE #>  - Countsplitting: TRUE #>  - Assay: RNA #>  - Layer used to build tree: counts_log_1 #>  - Layer used to prune tree: counts_log_2 #>  #> Proceeding with the following parameters: #>  - Intermediate data stored under key: CHOIR #>  - Alpha: 0.05 #>  - Multiple comparison adjustment: bonferroni #>  - Features to train RF: var #>  - # of excluded features: 0 #>  - # of permutations: 100 #>  - # of RF trees: 50 #>  - Use variance: TRUE #>  - Minimum accuracy: 0.5 #>  - Minimum connections: 1 #>  - Maximum repeated errors: 20 #>  - Distance approximation: TRUE #>  - Maximum cells sampled: Inf #>  - Downsampling rate: 0.5 #>  - Minimum reads: >0 reads #>  - Maximum clusters: auto #>  - Minimum cluster depth: 2000 #>  - Normalization method: none #>  - Subtree dimensionality reductions: TRUE #>  - Dimensionality reduction method: Default #>  - Dimensionality reduction parameters provided: No #>  - # of variable features: Default #>  - Batch correction method: none #>  - Batch correction parameters provided: No #>  - Nearest neighbor parameters provided:  #>      - verbose: FALSE #>  - Clustering parameters provided:  #>      - algorithm: 1 #>      - group.singletons: TRUE #>      - verbose: FALSE #>  - # of cores: 2 #>  - Random seed: 1 #> 2025-01-20 13:24:01 : (Step 2/7) Running initial dimensionality reduction.. #> 2025-01-20 13:24:01 : Preparing matrix using 'RNA' assay and 'counts_log_1' slot.. #> 2025-01-20 13:24:02 : Running PCA with 2000 variable features.. #> 2025-01-20 13:24:02 : (Step 3/7) Generating initial nearest neighbors graph.. #> 2025-01-20 13:24:02 : (Step 4/7) Identify starting clustering resolution.. #>                       Starting resolution: 0.4 #> 2025-01-20 13:24:02 : (Step 5/7) Building root clustering tree.. #>  #>  #>                       Identified 3 clusters in root tree. #> 2025-01-20 13:24:02 : (Step 6/7) Subclustering root tree.. #> 2025-01-20 13:24:03 : 6% (Subtree 1/3, 136 cells), 3 total clusters. #> 2025-01-20 13:24:03 : 11% (Subtree 1/3, 136 cells), 4 total clusters. #> 2025-01-20 13:24:06 : 53% (Subtree 1/3, 136 cells), 7 total clusters. #> 2025-01-20 13:24:07 : 59% (Subtree 2/3, 83 cells), 7 total clusters. #> 2025-01-20 13:24:07 : 61% (Subtree 2/3, 83 cells), 7 total clusters. #> 2025-01-20 13:24:07 : 88% (Subtree 2/3, 83 cells), 9 total clusters. #> 2025-01-20 13:24:07 : 90% (Subtree 2/3, 83 cells), 9 total clusters. #> 2025-01-20 13:24:07 : 91% (Subtree 3/3, 24 cells), 9 total clusters. #>  #> 2025-01-20 13:24:08 : (Step 7/7) Compiling full clustering tree.. #>                       Full tree has 6 levels and 7 clusters. #>  #> ---------------------------------------- #> - CHOIR - Part 2: Prune clustering tree #> ---------------------------------------- #> 2025-01-20 13:24:08 : (Step 1/2) Checking inputs and preparing object.. #>  #> Input data: #>  - Object type: Seurat #>  - # of cells: 243 #>  - # of batches: 1 #>  - # of modalities: 1 #>  - # of subtrees: 4 #>  - # of levels: 6 #>  - # of starting clusters: 7 #>  - Countsplitting: TRUE #>  - Assay: RNA #>  - Layer used to build tree: counts_log_1 #>  - Layer used to prune tree: counts_log_2 #>  #> Proceeding with the following parameters: #>  - Intermediate data stored under key: CHOIR #>  - Alpha: 0.05 #>  - Multiple comparison adjustment: bonferroni #>  - Features to train RF: var #>  - # of excluded features: 0 #>  - # of permutations: 100 #>  - # of RF trees: 50 #>  - Use variance: TRUE #>  - Minimum accuracy: 0.5 #>  - Minimum connections: 1 #>  - Maximum repeated errors: 20 #>  - Distance approximation: TRUE #>  - Distance awareness: 2 #>  - All metrics collected: FALSE #>  - Maximum cells sampled: Inf #>  - Downsampling rate: 0.5 #>  - Minimum reads: >0 reads #>  - Normalization method: none #>  - Batch correction method: none #>  - Clustering parameters provided:  #>      - algorithm: 1 #>      - group.singletons: TRUE #>      - verbose: FALSE #>  - # of cores: 2 #>  - Random seed: 1 #> 2025-01-20 13:24:08 : (Step 2/2) Iterating through clustering tree.. #> 2025-01-20 13:24:08 : 12% (1/6 levels) in 0 min. 6 clusters remaining. #> 2025-01-20 13:24:08 : 21% (2/6 levels) in 0 min. 6 clusters remaining. #> 2025-01-20 13:24:08 : 30% (2/6 levels) in 0.01 min. 6 clusters remaining. #> 2025-01-20 13:24:09 : 40% (3/6 levels) in 0.03 min. 5 clusters remaining. #> 2025-01-20 13:24:10 : 51% (4/6 levels) in 0.04 min. 4 clusters remaining. #> 2025-01-20 13:24:10 : 61% (4/6 levels) in 0.04 min. 4 clusters remaining. #> 2025-01-20 13:24:12 : 71% (5/6 levels) in 0.07 min. 4 clusters remaining. #> 2025-01-20 13:24:12 : 80% (6/6 levels) in 0.07 min. 4 clusters remaining. #> 2025-01-20 13:24:12 : 92% (6/6 levels) in 0.07 min. 4 clusters remaining. #> 2025-01-20 13:24:12 : Checking for underclustering in 2 clusters. #> 2025-01-20 13:24:12 : Additional comparisons necessary. 4 clusters remaining. #> 2025-01-20 13:24:12 : Completed: all clusters compared. #>  #>  - In 1 comparisons, clusters were split due to the minimum number of nearest neighbor connections. #>  #> 2025-01-20 13:24:12 : Identified 4 clusters."},{"path":"/articles/atlas_scale_data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Running CHOIR on atlas-scale data","text":"vignette provides basic example run CHOIR atlas-scale data. Throughout vignette, sample results shown use human brain atlas data Siletti et al. 2023 (https://doi.org/10.1126/science.add7046), consisting ~3.3M cells. Using CHOIR “straight box” works best datasets 500,000 cells. larger datasets 1 million cells may also run smoothly, datasets size larger may encounter computational limits. general, assumption developers end-users attempting analyze datasets larger 500,000 cells access high-performance computational resources enable parallelization. scale dataset, annotation cell groups can often take weeks manual effort without assistance tool like CHOIR. CHOIR likely require least 24 hours run dataset 500,000 cells, store information end-user need annotate clusters check decisions made CHOIR. Specifically, cluster, including merged along way, CHOIR stores features found important cluster (e.g., marker genes) reasoning behind CHOIR merged merge cluster. records can found CHOIR → records → feature_importance_records CHOIR → records → comparison_records. use CHOIR atlas-scale data, recommend three-step approach partitions dataset smaller relevant chunks (step 1), runs CHOIR parallel smaller chunks (step 2), stitches results back together provide final set clusters (step 3). ’ll need following packages:","code":"library(CHOIR) library(Seurat)"},{"path":"/articles/atlas_scale_data.html","id":"step-1-generate-parent-clusters","dir":"Articles","previous_headings":"","what":"Step 1: Generate parent clusters","title":"Running CHOIR on atlas-scale data","text":"full dataset, run CHOIR function buildParentTree. function runs initial dimensionality reduction, optional batch correction, subsequent steps generate “parent” clustering tree. clustering tree extends single cluster encompassing cells cluster level silhouette score maximized.","code":"object <- buildParentTree(object)"},{"path":"/articles/atlas_scale_data.html","id":"step-2-subset-each-parent-cluster","dir":"Articles","previous_headings":"","what":"Step 2: Subset each parent cluster","title":"Running CHOIR on atlas-scale data","text":"Subset parent cluster save separate object. resulting “parent clusters” 450,000 cells, minimal number subdivisions run parent cluster resulting subclusters 450,000 cells. example, 25 parent clusters resulted Siletti et al. 2023 human brain atlas data. Three 450,000 cells, split prior step 3.","code":"# For example subtree_s <- subset(obj, subset = CHOIR_parent_clusters == \"P1\") if (ncol(subtree_s) > 450000) {   # Get nearest neighbors   subtree_s <- subtree_s %>%      FindVariableFeatures() %>%     ScaleData() %>%      RunPCA() %>%      FindNeighbors()   # Find starting resolution   starting_resolution <- CHOIR:::.getStartingResolution(subtree_s@graphs$RNA_snn,                                                         cluster_params = list(algorithm = 1,                                                                               group.singletons = TRUE),                                                         random_seed = 1,                                                         verbose = TRUE)   # Get clusters at starting resolution   subtree_s <- FindClusters(subtree_s, resolution = starting_resolution[[\"starting_resolution\"]])   # Further subset each resulting cluster   subtree_s_0 <- subset(subtree_s, subset = seurat_clusters == 0)   subtree_s_1 <- subset(subtree_s, subset = seurat_clusters == 1)   # Etc.. }"},{"path":"/articles/atlas_scale_data.html","id":"step-3-run-choir-on-each-subsetted-parent-cluster","dir":"Articles","previous_headings":"","what":"Step 3: Run CHOIR on each subsetted parent cluster","title":"Running CHOIR on atlas-scale data","text":"subsetted object: First, run standard CHOIR method, retain parameter settings used buildParentTree, including downsampling_rate. can done efficiently using parallel jobs submitted HPC, one per subsetted object. parent clusters subclustered , instead run following code: example, parent cluster P9 Siletti et al. 2023 human brain atlas data composed 1395 cells single batch, require subclustering. , extract resulting clusters, clustering trees, comparison records using CHOIR function getRecords.","code":"subtree_s <- CHOIR(subtree_s,                    key = \"CHOIR_subtree\",                    downsampling_rate = object@misc$CHOIR$parameters$buildParentTree_parameters$downsampling_rate) # Add cluster labels for a single cluster subtree_x@misc$CHOIR_subtree$clusters$CHOIR_clusters_0.05 <- data.frame(CellID = colnames(subtree_x),                                                                         CHOIR_clusters_0.05 = 1,                                                                         Record_cluster_label = \"P0_L0_1\")  # Add parameter records matching remaining subtrees subtree_x@misc$CHOIR_subtree$parameters <- subtree_s@misc$CHOIR$parameters subtree_records_list <- vector(mode = \"list\", length = n_subtrees) for (s in 1:n_subtrees) {   subtree_records_list[[s]] <- getRecords(subtree_objects_list[[s]], key = \"CHOIR_subtree\") }"},{"path":"/articles/atlas_scale_data.html","id":"step-4-combine-subtrees-and-standardize-significance-thresholds","dir":"Articles","previous_headings":"","what":"Step 4: Combine subtrees and standardize significance thresholds","title":"Running CHOIR on atlas-scale data","text":"Run CHOIR function combineTrees complete set records extracted step 2. , significance threshold standardized across clustering trees, yielding final set clusters.","code":"object <- combineTrees(object,                        subtree_list = subtree_records_list)"},{"path":"/articles/atlas_scale_data.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"Running CHOIR on atlas-scale data","text":"clustering finished, can generate UMAP dimensionality reduction use function plotCHOIR plot visualization clusters. example using human brain atlas data Siletti et al. 2023.  granularity, subsets clusters can visualized using subtree dimensionality reduction. example shows parent cluster P24 human brain atlas data Siletti et al. 2023, includes clusters corresponding macrophages, microglia, fibroblasts, pericytes, among cell types.","code":"# Run UMAP object <- runCHOIRumap(object,                        reduction = \"P0_reduction\") # Plot plotCHOIR(object) # Run UMAP object <- runCHOIRumap(object,                        reduction = \"P24_reduction\") # Plot plotCHOIR(object, reduction = \"P24_reduction_UMAP\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cathrine Sant. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sant C (2025). CHOIR: CHOIR - Cluster Hierachy Optimization Iterative Random forests. R package version 0.2.0.","code":"@Manual{,   title = {CHOIR: CHOIR - Cluster Hierachy Optimization by Iterative Random forests},   author = {Cathrine Sant},   year = {2025},   note = {R package version 0.2.0}, }"},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"CHOIR - Cluster Hierachy Optimization by Iterative Random forests","text":"CHOIR bioRxiv! can find . Sant et al., CHOIR improves significance-based detection cell types states single-cell data. bioRxiv (2024)","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"CHOIR - Cluster Hierachy Optimization by Iterative Random forests","text":"CHOIR designed run Unix-based operating systems macOS linux. CHOIR installation currently requires remotes BiocManager installation GitHub Bioconductor packages. Run following commands install various dependencies used CHOIR: First, install remotes (installing GitHub packages) isn’t already installed: , install BiocManager (installing bioconductor packages) isn’t already installed: , install CHOIR: Notes: Installation complete 2 minutes. package supported macOS Linux. CHOIR depends heavily Seurat package, undergoing many changes recent months. tested successfully Seurat version 4.3.0 5.0.1. package dependencies can found “DESCRIPTION” file.","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) install.packages(\"remotes\") if (!requireNamespace(\"BiocManager\", quietly = TRUE)) install.packages(\"BiocManager\") remotes::install_github(\"corceslab/CHOIR\", ref=\"main\", repos = BiocManager::repositories(), upgrade = \"never\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"CHOIR - Cluster Hierachy Optimization by Iterative Random forests","text":"Please follow vignette. vignette takes less 10 minutes run standard laptop.","code":""},{"path":"/index.html","id":"how-choir-works","dir":"","previous_headings":"","what":"How CHOIR works","title":"CHOIR - Cluster Hierachy Optimization by Iterative Random forests","text":"CHOIR hierarchical clustering algorithm uses permutation testing cluster identification statistical inference.  CHOIR identifies clusters merged applying permutation test approach assess accuracy random forest classifiers predicting cluster assignments normalized feature matrix.  CHOIR constructs iteratively prunes hierarchical clustering tree using statistical inference prevent underclustering overclustering.  CHOIR developed maintained Corces Lab Gladstone Institutes.","code":""},{"path":"/reference/CHOIR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CHOIR: CHOIR - Cluster Hierachy Optimization by Iterative Random forests — CHOIR-package","title":"CHOIR: CHOIR - Cluster Hierachy Optimization by Iterative Random forests — CHOIR-package","text":"CHOIR clustering algorithm single-cell sequencing data. CHOIR applies framework permutation tests random forest classifiers across hierarchical clustering tree statistically identify clusters represent distinct populations.","code":""},{"path":"/reference/CHOIR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CHOIR: CHOIR - Cluster Hierachy Optimization by Iterative Random forests — CHOIR-package","text":"Maintainer: Cathrine Sant cathrine.sant@gladstone.ucsf.edu (ORCID)","code":""},{"path":"/reference/CHOIR.html","id":null,"dir":"Reference","previous_headings":"","what":"Run CHOIR clustering — CHOIR","title":"Run CHOIR clustering — CHOIR","text":"function runs CHOIR clustering identify set clusters represent statistically distinct populations. CHOIR based premise , clusters contain biologically different cell types states, classifier considers features present cells cluster able distinguish clusters higher level accuracy classifiers trained randomly permuted cluster labels.","code":""},{"path":"/reference/CHOIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run CHOIR clustering — CHOIR","text":"","code":"CHOIR(   object,   key = \"CHOIR\",   alpha = 0.05,   p_adjust = \"bonferroni\",   feature_set = \"var\",   exclude_features = NULL,   n_iterations = 100,   n_trees = 50,   use_variance = TRUE,   min_accuracy = 0.5,   min_connections = 1,   max_repeat_errors = 20,   distance_approx = TRUE,   distance_awareness = 2,   collect_all_metrics = FALSE,   sample_max = Inf,   downsampling_rate = \"auto\",   min_reads = NULL,   max_clusters = \"auto\",   min_cluster_depth = 2000,   normalization_method = \"none\",   subtree_reductions = TRUE,   reduction_method = NULL,   reduction_params = list(),   n_var_features = NULL,   batch_correction_method = \"none\",   batch_correction_params = list(),   batch_labels = NULL,   neighbor_params = list(),   cluster_params = list(algorithm = 1, group.singletons = TRUE),   use_assay = NULL,   use_slot = NULL,   ArchR_matrix = NULL,   ArchR_depthcol = NULL,   countsplit = FALSE,   countsplit_suffix = NULL,   reduction = NULL,   var_features = NULL,   atac = FALSE,   n_cores = NULL,   random_seed = 1,   verbose = TRUE )"},{"path":"/reference/CHOIR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run CHOIR clustering — CHOIR","text":"object object class Seurat, SingleCellExperiment, ArchRProject. multi-omic data, recommend using ArchRProject objects. key name CHOIR-related data run stored object. Defaults “CHOIR”. alpha numerical value indicating significance level used permutation test comparisons cluster distinguishability. Defaults 0.05. Decreasing alpha value yield conservative clusters (fewer clusters) often decrease computational time required, fewer cluster comparisons may needed. p_adjust string indicating multiple comparison adjustment method use. Permitted values “bonferroni”, “fdr”, “none”. Defaults “bonferroni”. correction methods may less conservative, identifying clusters, CHOIR applies filters reduce total number tests performed. feature_set string indicating whether train random forest classifiers “” features variable (“var”) features. Defaults “var”. Computational time memory required may increase features used. Using features instead variable features may result conservative cluster calls. exclude_features character vector indicating features excluded input random forest classifier. Defaults NULL, means features excluded. parameter can used, example, exclude features correlated cell quality, mitochondrial genes. Failure exclude problematic features result clusters driven cell quality, -exclusion features reduce ability CHOIR distinguish cell populations differ features. n_iterations numerical value indicating number iterations run permutation test comparison. Increasing number iterations approximately linearly increase computational time required provide accurate estimation significance permutation test. Decreasing number iterations runs risk leading underclustering due lack statistical power. default value, 100 iterations, selected avoids underclustering, minimizing computational time diminishing returns running CHOIR additional iterations. n_trees numerical value indicating number trees random forest. Defaults 50. Increasing number trees likely increase computational time required. Though entirely predictable, increasing number trees point may enable nuanced distinctions, likely provide diminishing returns. use_variance Boolean value indicating whether use variance random forest accuracy scores part permutation test threshold. Defaults TRUE. Setting parameter FALSE make CHOIR considerably less conservative, identifying clusters, particularly large datasets. min_accuracy numerical value indicating minimum accuracy required random forest classifier, clusters automatically merged. Defaults 0.5, representing random chance probability assigning correct cluster labels; therefore, decreasing minimum accuracy recommended. Increasing minimum accuracy lead conservative cluster assignments often decrease computational time required, fewer cluster comparisons may needed. min_connections numerical value indicating minimum number nearest neighbors two clusters clusters considered adjacent. Non-adjacent clusters merged. Defaults 1. threshold allows CHOIR avoid running full permutation test comparison clusters highly likely distinct, saving computational time. Therefore, setting parameter 0 increase number permutation test comparisons run , thus, computational time. intent parameter avoid running permutation test comparisons clusters different merged. Therefore, recommend increasing parameter value beyond 10, higher values may result instances overclustering. max_repeat_errors numerical value indicating maximum number repeatedly mislabeled cells taken account permutation tests. parameter used account situations random forest classifier errors concentrated among cells repeatedly misassigned. set 0, repeat errors evaluated. Defaults 20. situations relatively infrequent, setting parameter lower values (especially 0) may result underclustering due small number intermediate cells. Setting parameter higher values may lead instances overclustering recommended. distance_approx Boolean value indicating whether use approximate distance calculations. Defaults TRUE, use centroid-based distances. Setting distance approximation FALSE substantially increase computational time memory required, particularly large datasets. Using approximated distances (TRUE) rather absolute distances (FALSE) unlikely meaningful effect distance thresholds imposed CHOIR. distance_awareness numerical value representing distance threshold cluster merge another cluster significance testing used. Specifically, value multiplier applied distance cluster closest distinguishable neighbor based random forest comparison. Defaults 2, sets threshold two-fold increase distance closest distinguishable neighbor. threshold allows CHOIR avoid running full permutation test comparison clusters highly likely distinct, saving computational time. omit distance calculations perform permutation testing comparisons, set parameter FALSE. Setting parameter FALSE increasing input value increase number permutation test comparisons run , thus, computational time. rare cases, small distant clusters may erroneously merged distance thresholds used. intent parameter avoid running permutation test comparisons clusters different merged. recommend decreasing parameter value 1.5, lower values may result instances overclustering. collect_all_metrics Boolean value indicating whether collect save additional metrics random forest classifiers, including feature importances every comparison. Defaults FALSE. Setting parameter TRUE slightly increase computational time required. parameter effect final cluster calls. sample_max numerical value indicating maximum number cells sampled per cluster train/test random forest classifier. Defaults Inf (infinity), cap number cells used, cells used comparisons. Decreasing parameter may decrease computational time required, may result instances underclustering. input provided downsampling_rate sample_max parameters, minimum resulting cell number calculated used comparison. downsampling_rate numerical value indicating proportion cells sampled per cluster train/test random forest classifier. efficiency, default value, \"auto\", sets downsampling rate according dataset size. Decreasing parameter may decrease computational time required, may also make final cluster calls conservative. input provided downsampling_rate sample_max parameters, minimum resulting cell number calculated used comparison. min_reads numeric value used filter features prior input random forest classifier. default value, NULL, filter features 0 counts current clusters compared. Higher values used caution, may increase signal--noise ratio encountered random forest classifiers. max_clusters Indicates extent hierarchical clustering tree expanded. Defaults “auto”, expand tree cases underclustering eliminated branches. Alternatively, supply numerical value indicating maximum number clusters tree expanded. Using default value parameter highly recommended avoid instances underclustering. Setting numerical value parameter hampers ability CHOIR ensure underclustering occurred. min_cluster_depth numerical value indicating maximum cluster size bottom clustering tree, prior pruning branches. Defaults 2000. Increasing parameter can cause computational bottleneck generating initial clustering tree large datasets; therefore, default value recommended. However, changing value unlikely meaningful effects final cluster results. normalization_method character string vector indicating normalization method use. general, input data supplied CHOIR normalization, except user wishes use Seurat SCTransform normalization. Permitted values “none” “SCTransform”. Defaults “none”. CHOIR tested thoroughly SCTransform normalization, recommend approach time. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. subtree_reductions Boolean value indicating whether generate new dimensionality reduction set highly variable features subtree. Defaults TRUE, enables CHOIR compare similar clusters using nuanced set features. Setting parameter FALSE may decrease computational time, may result instances underclustering. reduction_method character string vector indicating dimensionality reduction method use. Permitted values “PCA” principal component analysis, “LSI” latent semantic indexing, “IterativeLSI” iterative latent semantic indexing. three methods implement Seurat function RunPCA, Signac function RunSVD, ArchR function addIterativeLSI, respectively. default value, NULL, select method based input data type, specifically “IterativeLSI” ArchR objects, “LSI” Seurat SingleCellExperiment objects parameter atac TRUE, “PCA” cases. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. reduction_params list additional parameters passed selected dimensionality reduction method. default, CHOIR use default parameter settings dimensionality reduction method indicated input parameter reduction_method. Input parameter passed downstream dimensionality reduction method overwrite augment defaults. Altering performance dimensionality reduction CHOIR affect downstream clustering results, ways easily predictable. n_var_features numerical value indicating many variable features identify. Defaults 2000 features data inputs, 25000 features ATAC-seq data. Increasing number features may increase computational time memory required. provided value either substantially higher lower, instances underclustering may occur. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. batch_correction_method character string indicating batch correction method use. Permitted values “Harmony” “none”. Defaults “none”. Batch correction used different batches expected also unique cell types cell states. Using batch correction ensure clusters originate single batch, thereby making final cluster calls conservative. batch_correction_params list additional parameters passed selected batch correction method iteration. applicable batch_correction_method “Harmony”. batch_labels character string , applying batch correction, specifies name column input object metadata containing batch labels. Defaults NULL. neighbor_params list additional parameters passed Seurat function FindNeighbors (, case multi-modal data Seurat SingleCellExperiment objects, Seurat function FindMultiModalNeighbors). cluster_params list additional parameters passed Seurat function FindClusters clustering level tree. default, Seurat::FindClusters parameter group.singletons set TRUE, CHOIR relabels clusters singleton constitutes cluster. use_assay Seurat SingleCellExperiment objects, character string vector indicating assay(s) use provided object. default value, NULL, choose current active assay Seurat objects logcounts assay SingleCellExperiment objects. use_slot Seurat objects, character string vector indicating layers(s)—previously known slot(s)—use provided object. default value, NULL, choose layer/slot based selected assay. assay \"RNA\", \"sketch”, \"SCT”, \"integrated\" provided, must specify value use_slot. multi-omic datasets, provide vector value corresponding provided value use_assay order. ArchR_matrix ArchR objects, character string vector indicating matrix matrices use provided object. default value, NULL, use “GeneScoreMatrix” ATAC-seq data “GeneExpressionMatrix” RNA-seq data. multi-omic datasets, provide vector value corresponding modality. \"GeneScoreMatrix\" provided, \"GeneScoreMatrix\" used input random forest classifiers, \"TileMatrix\" used initial dimensionality reduction(s). ArchR_depthcol ArchR objects, character string vector indicating column use correlation sequencing depth. default value, NULL, use “nFrags” column ATAC-seq data “Gex_nUMI” RNA-seq data. multi-omic datasets, provide vector value corresponding provided value ArchR_matrix order. countsplit Boolean value indicating whether use count split input data (see countsplit package), one matrix counts used clustering tree generation separate matrix used random forest classifier permutation testing. Defaults FALSE. Enabling count splitting likely result conservative final cluster calls likely perform best datasets high read depths. countsplit_suffix character vector indicating suffixes distinguish two count split matrices used. Suffixes appended onto input string/vector parameter use_slot Seurat objects, use_assay SingleCellExperiment objects, ArchR_matrix ArchR objects. count splitting enabled, default value NULL uses suffixes \"_1\" \"_2\". reduction optional matrix dimensionality reduction cell embeddings provided user subsequent clustering steps. default, parameter set NULL, dimensionality reduction(s) calculated using method specified reduction_method parameter. var_features optional character vector names variable features used subsequent clustering steps. default, parameter set NULL, variable features calculated part running CHOIR. Input parameter required dimensionality reduction supplied parameter reduction. multi-omic datasets, concatenate feature names modalities. atac Boolean value vector indicating whether provided data ATAC-seq data. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. Defaults FALSE. n_cores numerical value indicating number cores use parallelization. default, CHOIR use number available cores minus 2. CHOIR parallelized computation permutation test iterations. Therefore, number cores number iterations theoretically decrease computational time required. practice, 8–16 cores recommended datasets 500,000 cells. random_seed numerical value indicating random seed used. Defaults 1. CHOIR uses randomization throughout generation pruning clustering tree. Therefore, changing random seed may yield slight differences final cluster assignments. verbose Boolean value indicating whether use verbose output execution CHOIR. Defaults TRUE, can set FALSE cleaner output.","code":""},{"path":"/reference/CHOIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run CHOIR clustering — CHOIR","text":"Returns object following added data stored provided key: cell_IDs Cell IDs belonging subtree clusters Final clusters, full hierarchical cluster tree, stepwise cluster results progressive pruning step graph calculated nearest neighbor shared nearest neighbor adjacency matrices parameters Record parameter values used records Metadata decision points hierarchical tree construction, recorded permutation test comparisons, feature importance scores comparisons reduction Cell embeddings calculated dimensionality reductions var_features Variable features calculated dimensionality reductions","code":""},{"path":"/reference/CHOIR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run CHOIR clustering — CHOIR","text":"First, hierarchical clustering tree generated using top-approach proceeds initial partition, cells cluster, partition cells demonstrably overclustered. Second, identify final set clusters, hierarchical clustering tree pruned bottom using framework random forest classifiers permutation tests. multi-modal data, optionally supply parameter inputs vectors/lists sequentially specify value modality.","code":""},{"path":"/reference/CHOIRpalette.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate color palette — CHOIRpalette","title":"Generate color palette — CHOIRpalette","text":"Generate color palette based input number. Hex values standard n = 100, larger values n, generated using Polychrome::createPalette().","code":""},{"path":"/reference/CHOIRpalette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate color palette — CHOIRpalette","text":"","code":"CHOIRpalette(n)"},{"path":"/reference/CHOIRpalette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate color palette — CHOIRpalette","text":"n Number colors","code":""},{"path":"/reference/CHOIRpalette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate color palette — CHOIRpalette","text":"Returns vector n hex values.","code":""},{"path":"/reference/buildParentTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Build parent clustering tree — buildParentTree","title":"Build parent clustering tree — buildParentTree","text":"function constructs hierarchical clustering tree starting single cluster encompassing cells. parent tree constructed, subtrees can generated subsequent steps outside function.","code":""},{"path":"/reference/buildParentTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build parent clustering tree — buildParentTree","text":"","code":"buildParentTree(   object,   key = \"CHOIR\",   distance_approx = TRUE,   downsampling_rate = \"auto\",   normalization_method = \"none\",   reduction_method = NULL,   reduction_params = list(),   n_var_features = NULL,   batch_correction_method = \"none\",   batch_correction_params = list(),   batch_labels = NULL,   neighbor_params = list(),   cluster_params = list(algorithm = 1, group.singletons = TRUE),   use_assay = NULL,   use_slot = NULL,   ArchR_matrix = NULL,   ArchR_depthcol = NULL,   countsplit = FALSE,   countsplit_suffix = NULL,   reduction = NULL,   var_features = NULL,   atac = FALSE,   n_cores = NULL,   random_seed = 1,   verbose = TRUE )"},{"path":"/reference/buildParentTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build parent clustering tree — buildParentTree","text":"object object class Seurat, SingleCellExperiment, ArchRProject. multi-omic data, recommend using ArchRProject objects. key name CHOIR-related data run stored object. Defaults “CHOIR”. distance_approx Boolean value indicating whether use approximate distance calculations. Defaults TRUE, use centroid-based distances. Setting distance approximation FALSE substantially increase computational time memory required, particularly large datasets. Using approximated distances (TRUE) rather absolute distances (FALSE) unlikely meaningful effect distance thresholds imposed CHOIR. downsampling_rate numerical value indicating proportion cells sampled per cluster train/test random forest classifier. efficiency, default value, \"auto\", sets downsampling rate according dataset size. Decreasing parameter may decrease computational time required, may also make final cluster calls conservative. input provided downsampling_rate sample_max parameters, minimum resulting cell number calculated used comparison. Note downsampling_rate set buildParentTree function can retrieved later steps running CHOIR atlas-scale data. normalization_method character string vector indicating normalization method use. general, input data supplied CHOIR normalization, except user wishes use Seurat SCTransform normalization. Permitted values “none” “SCTransform”. Defaults “none”. CHOIR tested thoroughly SCTransform normalization, recommend approach time. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. reduction_method character string vector indicating dimensionality reduction method use. Permitted values “PCA” principal component analysis, “LSI” latent semantic indexing, “IterativeLSI” iterative latent semantic indexing. three methods implement Seurat function RunPCA, Signac function RunSVD, ArchR function addIterativeLSI, respectively. default value, NULL, select method based input data type, specifically “IterativeLSI” ArchR objects, “LSI” Seurat SingleCellExperiment objects parameter atac TRUE, “PCA” cases. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. reduction_params list additional parameters passed selected dimensionality reduction method. default, CHOIR use default parameter settings dimensionality reduction method indicated input parameter reduction_method. Input parameter passed downstream dimensionality reduction method overwrite augment defaults. Altering performance dimensionality reduction CHOIR affect downstream clustering results, ways easily predictable. n_var_features numerical value indicating many variable features identify. Defaults 2000 features data inputs, 25000 features ATAC-seq data. Increasing number features may increase computational time memory required. provided value either substantially higher lower, instances underclustering may occur. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. batch_correction_method character string indicating batch correction method use. Permitted values “Harmony” “none”. Defaults “none”. Batch correction used different batches expected also unique cell types cell states. Using batch correction ensure clusters originate single batch, thereby making final cluster calls conservative. batch_correction_params list additional parameters passed selected batch correction method iteration. applicable batch_correction_method “Harmony”. batch_labels character string , applying batch correction, specifies name column input object metadata containing batch labels. Defaults NULL. neighbor_params list additional parameters passed Seurat function FindNeighbors (, case multi-modal data Seurat SingleCellExperiment objects, Seurat function FindMultiModalNeighbors). cluster_params list additional parameters passed Seurat function FindClusters clustering level tree. default, Seurat::FindClusters parameter group.singletons set TRUE, CHOIR relabels clusters singleton constitutes cluster. use_assay Seurat SingleCellExperiment objects, character string vector indicating assay(s) use provided object. default value, NULL, choose current active assay Seurat objects logcounts assay SingleCellExperiment objects. use_slot Seurat objects, character string vector indicating layers(s)—previously known slot(s)—use provided object. default value, NULL, choose layer/slot based selected assay. assay \"RNA\", \"sketch”, \"SCT”, \"integrated\" provided, must specify value use_slot. multi-omic datasets, provide vector value corresponding provided value use_assay order. ArchR_matrix ArchR objects, character string vector indicating matrix matrices use provided object. default value, NULL, use “GeneScoreMatrix” ATAC-seq data “GeneExpressionMatrix” RNA-seq data. multi-omic datasets, provide vector value corresponding modality. \"GeneScoreMatrix\" provided, \"GeneScoreMatrix\" used input random forest classifiers, \"TileMatrix\" used initial dimensionality reduction(s). ArchR_depthcol ArchR objects, character string vector indicating column use correlation sequencing depth. default value, NULL, use “nFrags” column ATAC-seq data “Gex_nUMI” RNA-seq data. multi-omic datasets, provide vector value corresponding provided value ArchR_matrix order. countsplit Boolean value indicating whether use count split input data (see countsplit package), one matrix counts used clustering tree generation separate matrix used random forest classifier permutation testing. Defaults FALSE. Enabling count splitting likely result conservative final cluster calls likely perform best datasets high read depths. countsplit_suffix character vector indicating suffixes distinguish two count split matrices used. Suffixes appended onto input string/vector parameter use_slot Seurat objects, use_assay SingleCellExperiment objects, ArchR_matrix ArchR objects. count splitting enabled, default value NULL uses suffixes \"_1\" \"_2\". reduction optional matrix dimensionality reduction cell embeddings provided user subsequent clustering steps. default, parameter set NULL, dimensionality reduction(s) calculated using method specified reduction_method parameter. var_features optional character vector names variable features used subsequent clustering steps. default, parameter set NULL, variable features calculated part running CHOIR. Input parameter required dimensionality reduction supplied parameter reduction. multi-omic datasets, concatenate feature names modalities. atac Boolean value vector indicating whether provided data ATAC-seq data. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. Defaults FALSE. n_cores numerical value indicating number cores use parallelization. default, CHOIR use number available cores minus 2. CHOIR parallelized computation permutation test iterations. Therefore, number cores number iterations theoretically decrease computational time required. practice, 8–16 cores recommended datasets 500,000 cells. random_seed numerical value indicating random seed used. Defaults 1. CHOIR uses randomization throughout generation pruning clustering tree. Therefore, changing random seed may yield slight differences final cluster assignments. verbose Boolean value indicating whether use verbose output execution CHOIR. Defaults TRUE, can set FALSE cleaner output.","code":""},{"path":"/reference/buildParentTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build parent clustering tree — buildParentTree","text":"Returns object following added data stored provided key: reduction Cell embeddings calculated dimensionality reduction var_features Variable features calculated dimensionality reduction cell_IDs Cell IDs belonging parent tree graph Nearest neighbor shared nearest neighbor adjacency matrices clusters Parent hierarchical cluster tree parameters Record parameter values used","code":""},{"path":"/reference/buildParentTree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build parent clustering tree — buildParentTree","text":"multi-modal data, optionally supply parameter inputs vectors/lists sequentially specify value modality.","code":""},{"path":"/reference/buildTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Build full hierarchical clustering tree — buildTree","title":"Build full hierarchical clustering tree — buildTree","text":"function performs first step CHOIR algorithm. constructs hierarchical clustering tree starting single cluster encompassing cells. First, root tree constructed, subtrees subsequently generated. branch subdivided cells demonstrably overclustered.","code":""},{"path":"/reference/buildTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build full hierarchical clustering tree — buildTree","text":"","code":"buildTree(   object,   key = \"CHOIR\",   alpha = 0.05,   p_adjust = \"bonferroni\",   feature_set = \"var\",   exclude_features = NULL,   n_iterations = 100,   n_trees = 50,   use_variance = TRUE,   min_accuracy = 0.5,   min_connections = 1,   max_repeat_errors = 20,   distance_approx = TRUE,   sample_max = Inf,   downsampling_rate = \"auto\",   min_reads = NULL,   max_clusters = \"auto\",   min_cluster_depth = 2000,   normalization_method = \"none\",   subtree_reductions = TRUE,   reduction_method = NULL,   reduction_params = list(),   n_var_features = NULL,   batch_correction_method = \"none\",   batch_correction_params = list(),   batch_labels = NULL,   neighbor_params = list(),   cluster_params = list(algorithm = 1, group.singletons = TRUE),   use_assay = NULL,   use_slot = NULL,   ArchR_matrix = NULL,   ArchR_depthcol = NULL,   countsplit = FALSE,   countsplit_suffix = NULL,   reduction = NULL,   var_features = NULL,   atac = FALSE,   n_cores = NULL,   random_seed = 1,   verbose = TRUE )"},{"path":"/reference/buildTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build full hierarchical clustering tree — buildTree","text":"object object class Seurat, SingleCellExperiment, ArchRProject. multi-omic data, recommend using ArchRProject objects. key name CHOIR-related data run stored object. Defaults “CHOIR”. alpha numerical value indicating significance level used permutation test comparisons cluster distinguishability. Defaults 0.05. Decreasing alpha value yield conservative clusters (fewer clusters) often decrease computational time required, fewer cluster comparisons may needed. p_adjust string indicating multiple comparison adjustment method use. Permitted values “bonferroni”, “fdr”, “none”. Defaults “bonferroni”. correction methods may less conservative, identifying clusters, CHOIR applies filters reduce total number tests performed. feature_set string indicating whether train random forest classifiers “” features variable (“var”) features. Defaults “var”. Computational time memory required may increase features used. Using features instead variable features may result conservative cluster calls. exclude_features character vector indicating features excluded input random forest classifier. Defaults NULL, means features excluded. parameter can used, example, exclude features correlated cell quality, mitochondrial genes. Failure exclude problematic features result clusters driven cell quality, -exclusion features reduce ability CHOIR distinguish cell populations differ features. n_iterations numerical value indicating number iterations run permutation test comparison. Increasing number iterations approximately linearly increase computational time required provide accurate estimation significance permutation test. Decreasing number iterations runs risk leading underclustering due lack statistical power. default value, 100 iterations, selected avoids underclustering, minimizing computational time diminishing returns running CHOIR additional iterations. n_trees numerical value indicating number trees random forest. Defaults 50. Increasing number trees likely increase computational time required. Though entirely predictable, increasing number trees point may enable nuanced distinctions, likely provide diminishing returns. use_variance Boolean value indicating whether use variance random forest accuracy scores part permutation test threshold. Defaults TRUE. Setting parameter FALSE make CHOIR considerably less conservative, identifying clusters, particularly large datasets. min_accuracy numerical value indicating minimum accuracy required random forest classifier, clusters automatically merged. Defaults 0.5, representing random chance probability assigning correct cluster labels; therefore, decreasing minimum accuracy recommended. Increasing minimum accuracy lead conservative cluster assignments often decrease computational time required, fewer cluster comparisons may needed. min_connections numerical value indicating minimum number nearest neighbors two clusters clusters considered adjacent. Non-adjacent clusters merged. Defaults 1. threshold allows CHOIR avoid running full permutation test comparison clusters highly likely distinct, saving computational time. Therefore, setting parameter 0 increase number permutation test comparisons run , thus, computational time. intent parameter avoid running permutation test comparisons clusters different merged. Therefore, recommend increasing parameter value beyond 10, higher values may result instances overclustering. max_repeat_errors numerical value indicating maximum number repeatedly mislabeled cells taken account permutation tests. parameter used account situations random forest classifier errors concentrated among cells repeatedly misassigned. set 0, repeat errors evaluated. Defaults 20. situations relatively infrequent, setting parameter lower values (especially 0) may result underclustering due small number intermediate cells. Setting parameter higher values may lead instances overclustering recommended. distance_approx Boolean value indicating whether use approximate distance calculations. Defaults TRUE, use centroid-based distances. Setting distance approximation FALSE substantially increase computational time memory required, particularly large datasets. Using approximated distances (TRUE) rather absolute distances (FALSE) unlikely meaningful effect distance thresholds imposed CHOIR. sample_max numerical value indicating maximum number cells sampled per cluster train/test random forest classifier. Defaults Inf (infinity), cap number cells used, cells used comparisons. Decreasing parameter may decrease computational time required, may result instances underclustering. input provided downsampling_rate sample_max parameters, minimum resulting cell number calculated used comparison. downsampling_rate numerical value indicating proportion cells sampled per cluster train/test random forest classifier. efficiency, default value, \"auto\", sets downsampling rate according dataset size. Decreasing parameter may decrease computational time required, may also make final cluster calls conservative. input provided downsampling_rate sample_max parameters, minimum resulting cell number calculated used comparison. min_reads numeric value used filter features prior input random forest classifier. default value, NULL, filter features 0 counts current clusters compared. Higher values used caution, may increase signal--noise ratio encountered random forest classifiers. max_clusters Indicates extent hierarchical clustering tree expanded. Defaults “auto”, expand tree cases underclustering eliminated branches. Alternatively, supply numerical value indicating maximum number clusters tree expanded. Using default value parameter highly recommended avoid instances underclustering. Setting numerical value parameter hampers ability CHOIR ensure underclustering occurred. min_cluster_depth numerical value indicating maximum cluster size bottom clustering tree, prior pruning branches. Defaults 2000. Increasing parameter can cause computational bottleneck generating initial clustering tree large datasets; therefore, default value recommended. However, changing value unlikely meaningful effects final cluster results. normalization_method character string vector indicating normalization method use. general, input data supplied CHOIR normalization, except user wishes use Seurat SCTransform normalization. Permitted values “none” “SCTransform”. Defaults “none”. CHOIR tested thoroughly SCTransform normalization, recommend approach time. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. subtree_reductions Boolean value indicating whether generate new dimensionality reduction set highly variable features subtree. Defaults TRUE, enables CHOIR compare similar clusters using nuanced set features. Setting parameter FALSE may decrease computational time, may result instances underclustering. reduction_method character string vector indicating dimensionality reduction method use. Permitted values “PCA” principal component analysis, “LSI” latent semantic indexing, “IterativeLSI” iterative latent semantic indexing. three methods implement Seurat function RunPCA, Signac function RunSVD, ArchR function addIterativeLSI, respectively. default value, NULL, select method based input data type, specifically “IterativeLSI” ArchR objects, “LSI” Seurat SingleCellExperiment objects parameter atac TRUE, “PCA” cases. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. reduction_params list additional parameters passed selected dimensionality reduction method. default, CHOIR use default parameter settings dimensionality reduction method indicated input parameter reduction_method. Input parameter passed downstream dimensionality reduction method overwrite augment defaults. Altering performance dimensionality reduction CHOIR affect downstream clustering results, ways easily predictable. n_var_features numerical value indicating many variable features identify. Defaults 2000 features data inputs, 25000 features ATAC-seq data. Increasing number features may increase computational time memory required. provided value either substantially higher lower, instances underclustering may occur. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. batch_correction_method character string indicating batch correction method use. Permitted values “Harmony” “none”. Defaults “none”. Batch correction used different batches expected also unique cell types cell states. Using batch correction ensure clusters originate single batch, thereby making final cluster calls conservative. batch_correction_params list additional parameters passed selected batch correction method iteration. applicable batch_correction_method “Harmony”. batch_labels character string , applying batch correction, specifies name column input object metadata containing batch labels. Defaults NULL. neighbor_params list additional parameters passed Seurat function FindNeighbors (, case multi-modal data Seurat SingleCellExperiment objects, Seurat function FindMultiModalNeighbors). cluster_params list additional parameters passed Seurat function FindClusters clustering level tree. default, Seurat::FindClusters parameter group.singletons set TRUE, CHOIR relabels clusters singleton constitutes cluster. use_assay Seurat SingleCellExperiment objects, character string vector indicating assay(s) use provided object. default value, NULL, choose current active assay Seurat objects logcounts assay SingleCellExperiment objects. use_slot Seurat objects, character string vector indicating layers(s)—previously known slot(s)—use provided object. default value, NULL, choose layer/slot based selected assay. assay \"RNA\", \"sketch”, \"SCT”, \"integrated\" provided, must specify value use_slot. multi-omic datasets, provide vector value corresponding provided value use_assay order. ArchR_matrix ArchR objects, character string vector indicating matrix matrices use provided object. default value, NULL, use “GeneScoreMatrix” ATAC-seq data “GeneExpressionMatrix” RNA-seq data. multi-omic datasets, provide vector value corresponding modality. \"GeneScoreMatrix\" provided, \"GeneScoreMatrix\" used input random forest classifiers, \"TileMatrix\" used initial dimensionality reduction(s). ArchR_depthcol ArchR objects, character string vector indicating column use correlation sequencing depth. default value, NULL, use “nFrags” column ATAC-seq data “Gex_nUMI” RNA-seq data. multi-omic datasets, provide vector value corresponding provided value ArchR_matrix order. countsplit Boolean value indicating whether use count split input data (see countsplit package), one matrix counts used clustering tree generation separate matrix used random forest classifier permutation testing. Defaults FALSE. Enabling count splitting likely result conservative final cluster calls likely perform best datasets high read depths. countsplit_suffix character vector indicating suffixes distinguish two count split matrices used. Suffixes appended onto input string/vector parameter use_slot Seurat objects, use_assay SingleCellExperiment objects, ArchR_matrix ArchR objects. count splitting enabled, default value NULL uses suffixes \"_1\" \"_2\". reduction optional matrix dimensionality reduction cell embeddings provided user subsequent clustering steps. default, parameter set NULL, dimensionality reduction(s) calculated using method specified reduction_method parameter. var_features optional character vector names variable features used subsequent clustering steps. default, parameter set NULL, variable features calculated part running CHOIR. Input parameter required dimensionality reduction supplied parameter reduction. multi-omic datasets, concatenate feature names modalities. atac Boolean value vector indicating whether provided data ATAC-seq data. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. Defaults FALSE. n_cores numerical value indicating number cores use parallelization. default, CHOIR use number available cores minus 2. CHOIR parallelized computation permutation test iterations. Therefore, number cores number iterations theoretically decrease computational time required. practice, 8–16 cores recommended datasets 500,000 cells. random_seed numerical value indicating random seed used. Defaults 1. CHOIR uses randomization throughout generation pruning clustering tree. Therefore, changing random seed may yield slight differences final cluster assignments. verbose Boolean value indicating whether use verbose output execution CHOIR. Defaults TRUE, can set FALSE cleaner output.","code":""},{"path":"/reference/buildTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build full hierarchical clustering tree — buildTree","text":"Returns object following added data stored provided key: cell_IDs Cell IDs belonging subtree clusters Full hierarchical clustering tree graph calculated nearest neighbor shared nearest neighbor adjacency matrices parameters Record parameter values used records Metadata decision points hierarchical tree construction reduction Cell embeddings calculated dimensionality reductions var_features Variable features calculated dimensionality reductions","code":""},{"path":"/reference/buildTree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build full hierarchical clustering tree — buildTree","text":"multi-modal data, optionally supply parameter inputs vectors/lists sequentially specify value modality.","code":""},{"path":"/reference/combineTrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile separately pruned clustering trees and standardize thresholds — combineTrees","title":"Compile separately pruned clustering trees and standardize thresholds — combineTrees","text":"function designed use CHOIR atlas-scale data. take output buildParentTree, output subsequent applications CHOIR resulting subtree, combine results single compiled tree, pruned standardize thresholds across subtree.","code":""},{"path":"/reference/combineTrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile separately pruned clustering trees and standardize thresholds — combineTrees","text":"","code":"combineTrees(   object,   subtree_list,   key = \"CHOIR\",   alpha = NULL,   p_adjust = NULL,   feature_set = NULL,   exclude_features = NULL,   n_iterations = NULL,   n_trees = NULL,   use_variance = NULL,   min_accuracy = NULL,   min_connections = NULL,   max_repeat_errors = NULL,   distance_approx = NULL,   distance_awareness = NULL,   collect_all_metrics = NULL,   sample_max = NULL,   downsampling_rate = NULL,   min_reads = NULL,   normalization_method = NULL,   batch_correction_method = NULL,   batch_labels = NULL,   use_assay = NULL,   use_slot = NULL,   ArchR_matrix = NULL,   countsplit = NULL,   countsplit_suffix = NULL,   input_matrix = NULL,   nn_matrix = NULL,   dist_matrix = NULL,   reduction = NULL,   n_cores = NULL,   random_seed = NULL,   verbose = TRUE )"},{"path":"/reference/combineTrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile separately pruned clustering trees and standardize thresholds — combineTrees","text":"object object class Seurat, SingleCellExperiment, ArchRProject output function buildParentTree. multi-omic data, recommend using ArchRProject objects. subtree_list list containing CHOIR records subtree. key name CHOIR-related data run stored object. Defaults “CHOIR”. alpha numerical value indicating significance level used permutation test comparisons cluster distinguishability. Defaults 0.05. Decreasing alpha value yield conservative clusters (fewer clusters) often decrease computational time required, fewer cluster comparisons may needed. p_adjust string indicating multiple comparison adjustment method use. Permitted values “bonferroni”, “fdr”, “none”. Defaults “bonferroni”. correction methods may less conservative, identifying clusters, CHOIR applies filters reduce total number tests performed. feature_set string indicating whether train random forest classifiers “” features variable (“var”) features. Defaults “var”. Computational time memory required may increase features used. Using features instead variable features may result conservative cluster calls. exclude_features character vector indicating features excluded input random forest classifier. Defaults NULL, means features excluded. parameter can used, example, exclude features correlated cell quality, mitochondrial genes. Failure exclude problematic features result clusters driven cell quality, -exclusion features reduce ability CHOIR distinguish cell populations differ features. n_iterations numerical value indicating number iterations run permutation test comparison. Increasing number iterations approximately linearly increase computational time required provide accurate estimation significance permutation test. Decreasing number iterations runs risk leading underclustering due lack statistical power. default value, 100 iterations, selected avoids underclustering, minimizing computational time diminishing returns running CHOIR additional iterations. n_trees numerical value indicating number trees random forest. Defaults 50. Increasing number trees likely increase computational time required. Though entirely predictable, increasing number trees point may enable nuanced distinctions, likely provide diminishing returns. use_variance Boolean value indicating whether use variance random forest accuracy scores part permutation test threshold. Defaults TRUE. Setting parameter FALSE make CHOIR considerably less conservative, identifying clusters, particularly large datasets. min_accuracy numerical value indicating minimum accuracy required random forest classifier, clusters automatically merged. Defaults 0.5, representing random chance probability assigning correct cluster labels; therefore, decreasing minimum accuracy recommended. Increasing minimum accuracy lead conservative cluster assignments often decrease computational time required, fewer cluster comparisons may needed. min_connections numerical value indicating minimum number nearest neighbors two clusters clusters considered adjacent. Non-adjacent clusters merged. Defaults 1. threshold allows CHOIR avoid running full permutation test comparison clusters highly likely distinct, saving computational time. Therefore, setting parameter 0 increase number permutation test comparisons run , thus, computational time. intent parameter avoid running permutation test comparisons clusters different merged. Therefore, recommend increasing parameter value beyond 10, higher values may result instances overclustering. max_repeat_errors numerical value indicating maximum number repeatedly mislabeled cells taken account permutation tests. parameter used account situations random forest classifier errors concentrated among cells repeatedly misassigned. set 0, repeat errors evaluated. Defaults 20. situations relatively infrequent, setting parameter lower values (especially 0) may result underclustering due small number intermediate cells. Setting parameter higher values may lead instances overclustering recommended. distance_approx Boolean value indicating whether use approximate distance calculations. Defaults TRUE, use centroid-based distances. Setting distance approximation FALSE substantially increase computational time memory required, particularly large datasets. Using approximated distances (TRUE) rather absolute distances (FALSE) unlikely meaningful effect distance thresholds imposed CHOIR. distance_awareness numerical value representing distance threshold cluster merge another cluster significance testing used. Specifically, value multiplier applied distance cluster closest distinguishable neighbor based random forest comparison. Defaults 2, sets threshold two-fold increase distance closest distinguishable neighbor. threshold allows CHOIR avoid running full permutation test comparison clusters highly likely distinct, saving computational time. omit distance calculations perform permutation testing comparisons, set parameter FALSE. Setting parameter FALSE increasing input value increase number permutation test comparisons run , thus, computational time. rare cases, small distant clusters may erroneously merged distance thresholds used. intent parameter avoid running permutation test comparisons clusters different merged. recommend decreasing parameter value 1.5, lower values may result instances overclustering. collect_all_metrics Boolean value indicating whether collect save additional metrics random forest classifiers, including feature importances every comparison. Defaults FALSE. Setting parameter TRUE slightly increase computational time required. parameter effect final cluster calls. sample_max numerical value indicating maximum number cells sampled per cluster train/test random forest classifier. Defaults Inf (infinity), cap number cells used, cells used comparisons. Decreasing parameter may decrease computational time required, may result instances underclustering. input provided downsampling_rate sample_max parameters, minimum resulting cell number calculated used comparison. downsampling_rate numerical value indicating proportion cells sampled per cluster train/test random forest classifier. efficiency, default value, \"auto\", sets downsampling rate according dataset size. Decreasing parameter may decrease computational time required, may also make final cluster calls conservative. input provided downsampling_rate sample_max parameters, minimum resulting cell number calculated used comparison. min_reads numeric value used filter features prior input random forest classifier. default value, NULL, filter features 0 counts current clusters compared. Higher values used caution, may increase signal--noise ratio encountered random forest classifiers. normalization_method character string vector indicating normalization method use. general, input data supplied CHOIR normalization, except user wishes use Seurat SCTransform normalization. Permitted values “none” “SCTransform”. Defaults “none”. CHOIR tested thoroughly SCTransform normalization, recommend approach time. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. batch_correction_method character string indicating batch correction method use. Permitted values “Harmony” “none”. Defaults “none”. Batch correction used different batches expected also unique cell types cell states. Using batch correction ensure clusters originate single batch, thereby making final cluster calls conservative. batch_labels character string , applying batch correction, specifies name column input object metadata containing batch labels. Defaults NULL. use_assay Seurat SingleCellExperiment objects, character string vector indicating assay(s) use provided object. default value, NULL, choose current active assay Seurat objects logcounts assay SingleCellExperiment objects. use_slot Seurat objects, character string vector indicating layers(s)—previously known slot(s)—use provided object. default value, NULL, choose layer/slot based selected assay. assay \"RNA\", \"sketch”, \"SCT”, \"integrated\" provided, must specify value use_slot. multi-omic datasets, provide vector value corresponding provided value use_assay order. ArchR_matrix ArchR objects, character string vector indicating matrix matrices use provided object. default value, NULL, use “GeneScoreMatrix” ATAC-seq data “GeneExpressionMatrix” RNA-seq data. multi-omic datasets, provide vector value corresponding modality. countsplit Boolean value indicating whether use count split input data (see countsplit package), one matrix counts used clustering tree generation separate matrix used random forest classifier permutation testing. Defaults FALSE. Enabling count splitting likely result conservative final cluster calls likely perform best datasets high read depths. countsplit_suffix character vector indicating suffixes distinguish two count split matrices used. Suffixes appended onto input string/vector parameter use_slot Seurat objects, use_assay SingleCellExperiment objects, ArchR_matrix ArchR objects. count splitting enabled, default value NULL uses suffixes \"_1\" \"_2\". input_matrix optional matrix containing feature x cell data provided user, train random forest classifiers. default, parameter set NULL, CHOIR look feature x cell matri(ces) indicated function buildParentTree. nn_matrix optional matrix containing nearest neighbor adjacency cells, provided user. default, parameter set NULL, CHOIR look adjacency matri(ces) generated function buildParentTree. dist_matrix optional distance matrix cell cell distances (based dimensionality reduction cell embeddings), provided user. default, parameter set NULL, CHOIR look distance matri(ces) generated function buildParentTree. reduction optional matrix dimensionality reduction cell embeddings provided user subsequent clustering steps. default, parameter set NULL, CHOIR look dimensionality reductions generated function buildParentTree(). n_cores numerical value indicating number cores use parallelization. default, CHOIR use number available cores minus 2. CHOIR parallelized computation permutation test iterations. Therefore, number cores number iterations theoretically decrease computational time required. practice, 8–16 cores recommended datasets 500,000 cells. random_seed numerical value indicating random seed used. Defaults 1. CHOIR uses randomization throughout generation pruning clustering tree. Therefore, changing random seed may yield slight differences final cluster assignments. verbose Boolean value indicating whether use verbose output execution CHOIR. Defaults TRUE, can set FALSE cleaner output.","code":""},{"path":"/reference/combineTrees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile separately pruned clustering trees and standardize thresholds — combineTrees","text":"Returns object following added data stored provided key: clusters Final clusters, full hierarchical cluster tree, stepwise cluster results progressive pruning step parameters Record parameter values used records Metadata decision points hierarchical tree construction, recorded permutation test comparisons, feature importance scores comparisons","code":""},{"path":"/reference/compareClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare any two clusters using CHOIR's random forest classifier permutation\ntesting approach — compareClusters","title":"Compare any two clusters using CHOIR's random forest classifier permutation\ntesting approach — compareClusters","text":"function take two provided clusters assess whether distinguishable permutation test using random forest classifier prediction accuracies.","code":""},{"path":"/reference/compareClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare any two clusters using CHOIR's random forest classifier permutation\ntesting approach — compareClusters","text":"","code":"compareClusters(   object = NULL,   key = \"CHOIR\",   cluster1_cells = NULL,   cluster2_cells = NULL,   ident1 = NULL,   ident2 = NULL,   group_by = NULL,   alpha = 0.05,   feature_set = \"var\",   exclude_features = NULL,   n_iterations = 100,   n_trees = 50,   use_variance = TRUE,   min_accuracy = 0.5,   min_connections = 1,   max_repeat_errors = 20,   collect_all_metrics = FALSE,   sample_max = Inf,   downsampling_rate = \"auto\",   min_reads = NULL,   normalization_method = \"none\",   batch_labels = NULL,   use_assay = NULL,   use_slot = NULL,   ArchR_matrix = NULL,   atac = FALSE,   input_matrix = NULL,   nn_matrix = NULL,   var_features = NULL,   n_cores = NULL,   random_seed = 1,   verbose = TRUE )"},{"path":"/reference/compareClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare any two clusters using CHOIR's random forest classifier permutation\ntesting approach — compareClusters","text":"object object class Seurat, SingleCellExperiment, ArchRProject. multi-omic data, recommend using ArchRProject objects. used values provided parameters input_matrix nn_matrix. key name CHOIR-related data run stored object. Defaults “CHOIR”. used input provided parameters input_matrix nn_matrix. cluster1_cells character vector cell names belonging cluster 1. cluster2_cells character vector cell names belonging cluster 2. ident1 string indicating label cluster 1. ident2 string indicating label cluster 2. group_by string indicating column cluster labels 'ident1' 'ident2' belong . alpha numerical value indicating significance level used permutation test comparisons cluster distinguishability. Defaults 0.05. feature_set string indicating whether train random forest classifiers “” features variable (“var”) features. Defaults “var”. Computational time memory required may increase features used. Using features instead variable features may result conservative cluster calls. exclude_features character vector indicating features excluded input random forest classifier. Defaults NULL, means features excluded. parameter can used, example, exclude features correlated cell quality, mitochondrial genes. Failure exclude problematic features result clusters driven cell quality, -exclusion features reduce ability CHOIR distinguish cell populations differ features. n_iterations numerical value indicating number iterations run permutation test comparison. Increasing number iterations approximately linearly increase computational time required provide accurate estimation significance permutation test. Decreasing number iterations runs risk leading underclustering due lack statistical power. default value, 100 iterations, selected avoids underclustering, minimizing computational time diminishing returns running CHOIR additional iterations. n_trees numerical value indicating number trees random forest. Defaults 50. Increasing number trees likely increase computational time required. Though entirely predictable, increasing number trees point may enable nuanced distinctions, likely provide diminishing returns. use_variance Boolean value indicating whether use variance random forest accuracy scores part permutation test threshold. Defaults TRUE. Setting parameter FALSE make CHOIR considerably less conservative, identifying clusters, particularly large datasets. min_accuracy numerical value indicating minimum accuracy required random forest classifier, clusters automatically merged. Defaults 0.5, representing random chance probability assigning correct cluster labels; therefore, decreasing minimum accuracy recommended. Increasing minimum accuracy lead conservative cluster assignments often decrease computational time required, fewer cluster comparisons may needed. min_connections numerical value indicating minimum number nearest neighbors two clusters clusters considered adjacent. Non-adjacent clusters merged. Defaults 1. threshold allows CHOIR avoid running full permutation test comparison clusters highly likely distinct, saving computational time. intent parameter avoid running permutation test comparisons clusters different merged. Therefore, recommend increasing parameter value beyond 10, higher values may result instances overclustering. max_repeat_errors numerical value indicating maximum number repeatedly mislabeled cells taken account permutation tests. parameter used account situations random forest classifier errors concentrated among cells repeatedly misassigned. set 0, repeat errors evaluated. Defaults 20. situations relatively infrequent, setting parameter lower values (especially 0) may result underclustering due small number intermediate cells. Setting parameter higher values may lead instances overclustering recommended. collect_all_metrics Boolean value indicating whether collect save additional metrics random forest classifiers, including feature importances every comparison. Defaults FALSE. Setting parameter TRUE slightly increase computational time required. parameter effect final cluster calls. sample_max numerical value indicating maximum number cells sampled per cluster train/test random forest classifier. Defaults Inf (infinity), cap number cells used, cells used comparisons. Decreasing parameter may decrease computational time required, may result instances underclustering. input provided downsampling_rate sample_max parameters, minimum resulting cell number calculated used comparison. downsampling_rate numerical value indicating proportion cells sampled per cluster train/test random forest classifier. efficiency, default value, \"auto\", sets downsampling rate according dataset size. Decreasing parameter may decrease computational time required, may also make final cluster calls conservative. input provided downsampling_rate sample_max parameters, minimum resulting cell number calculated used comparison. min_reads numeric value used filter features prior input random forest classifier. default value, NULL, filter features 0 counts current clusters compared. Higher values used caution, may increase signal--noise ratio encountered random forest classifiers. normalization_method character string vector indicating normalization method use. general, input data supplied CHOIR normalization, except user wishes use Seurat SCTransform normalization. Permitted values “none” “SCTransform”. Defaults “none”. CHOIR tested thoroughly SCTransform normalization, recommend approach time. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. batch_labels character string , applying batch correction, specifies name column input object metadata containing batch labels. Defaults NULL. use_assay Seurat SingleCellExperiment objects, character string vector indicating assay(s) use provided object. default value, NULL, choose current active assay Seurat objects logcounts assay SingleCellExperiment objects. use_slot Seurat objects, character string vector indicating layers(s)—previously known slot(s)—use provided object. default value, NULL, choose layer/slot based selected assay. assay \"RNA\", \"sketch”, \"SCT”, \"integrated\" provided, must specify value use_slot. multi-omic datasets, provide vector value corresponding provided value use_assay order. ArchR_matrix ArchR objects, character string vector indicating matrix matrices use provided object. default value, NULL, use “GeneScoreMatrix” ATAC-seq data “GeneExpressionMatrix” RNA-seq data. multi-omic datasets, provide vector value corresponding modality. atac Boolean value vector indicating whether provided data ATAC-seq data. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. Defaults FALSE. input_matrix optional matrix containing feature x cell data provided user, train random forest classifiers. default, parameter set NULL, CHOIR look feature x cell matri(ces) indicated function buildTree. nn_matrix optional matrix containing nearest neighbor adjacency cells, provided user. default, parameter set NULL, CHOIR look adjacency matri(ces) generated function buildTree. var_features optional character vector names variable features used subsequent clustering steps. default, parameter set NULL, variable features previously identified function buildTree used. Input parameter required dimensionality reduction supplied parameter reduction. multi-omic datasets, concatenate feature names modalities. n_cores numerical value indicating number cores use parallelization. default, CHOIR use number available cores minus 2. CHOIR parallelized computation permutation test iterations. Therefore, number cores number iterations theoretically decrease computational time required. practice, 8–16 cores recommended datasets 500,000 cells. random_seed numerical value indicating random seed used. Defaults 1. CHOIR uses randomization throughout generation pruning clustering tree. Therefore, changing random seed may yield slight differences final cluster assignments. verbose Boolean value indicating whether use verbose output execution CHOIR. Defaults TRUE, can set FALSE cleaner output.","code":""},{"path":"/reference/compareClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare any two clusters using CHOIR's random forest classifier permutation\ntesting approach — compareClusters","text":"Returns list containing following elements: comparison_result string, either \"merge\" \"split\", indicating result comparison. comparison_records dataframe including metrics recorded comparison feature_importances 'collect_all_metrics' true, dataframe containing feature importance scores gene comparison","code":""},{"path":"/reference/getRecords.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve all CHOIR metadata — getRecords","title":"Retrieve all CHOIR metadata — getRecords","text":"Retrieve stored CHOIR data object","code":""},{"path":"/reference/getRecords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve all CHOIR metadata — getRecords","text":"","code":"getRecords(object, key = \"CHOIR\")"},{"path":"/reference/getRecords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve all CHOIR metadata — getRecords","text":"object object class Seurat, SingleCellExperiment, ArchRProject undergone CHOIR clustering. key name CHOIR-related data run stored object. Defaults “CHOIR”.","code":""},{"path":"/reference/getRecords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve all CHOIR metadata — getRecords","text":"Returns data stored provided key.","code":""},{"path":"/reference/inferTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer clustering tree from pre-generated clusters — inferTree","title":"Infer clustering tree from pre-generated clusters — inferTree","text":"Generate clustering tree provided, pre-generated clusters. Provide set cluster labels either dimensionality reduction distance matrix. dimensionality reduction provided, centroid distances calculated used.","code":""},{"path":"/reference/inferTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer clustering tree from pre-generated clusters — inferTree","text":"","code":"inferTree(cluster_labels, dist_matrix = NULL, reduction = NULL, verbose = TRUE)"},{"path":"/reference/inferTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer clustering tree from pre-generated clusters — inferTree","text":"cluster_labels named vector cluster IDs. Names must correspond cell IDs. dist_matrix optional distance matrix cell cell distances (based dimensionality reduction cell embeddings). reduction optional matrix dimensionality reduction cell embeddings used distance calculations. verbose Boolean value indicating whether use verbose output execution function. Can set FALSE cleaner output.","code":""},{"path":"/reference/inferTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer clustering tree from pre-generated clusters — inferTree","text":"clustering tree dataframe.","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/plotCHOIR.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimensional reduction plot with CHOIR clusters labeled — plotCHOIR","title":"Dimensional reduction plot with CHOIR clusters labeled — plotCHOIR","text":"Generate dimensionality reduction embedding plot colored (default) according clusters identified CHOIR. Additionally permits plotting mean prediction accuracy scores pairs clusters overlay.","code":""},{"path":"/reference/plotCHOIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimensional reduction plot with CHOIR clusters labeled — plotCHOIR","text":"","code":"plotCHOIR(   object,   key = \"CHOIR\",   reduction = NULL,   group_by = NULL,   cells = NULL,   highlight_cells = NULL,   label = TRUE,   legend = TRUE,   accuracy_scores = FALSE,   plot_nearest = TRUE,   ... )"},{"path":"/reference/plotCHOIR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimensional reduction plot with CHOIR clusters labeled — plotCHOIR","text":"object object class Seurat, SingleCellExperiment, ArchRProject undergone CHOIR clustering. multi-omic data, recommend using ArchRProject objects. key name CHOIR-related data run stored object. Defaults “CHOIR”. reduction character vector indicating CHOIR subtree dimensionality reduction plot (e.g., 'P0_reduction_UMAP', 'P1_reduction_UMAP'). Default = NULL plot UMAP 'P0_reduction_UMAP' generated CHOIR. group_by character string indicating metadata column color cells . Default = NULL color cells according clusters identified CHOIR. cells Vector cell names plot. Default cells. highlight_cells Vector cell names highlight. Default = NULL. label Boolean value indicating whether label groups. Defaults TRUE. legend Boolean value indicating whether include legend. Defaults TRUE. accuracy_scores Boolean value indicating whether overlay pairwise cluster comparison accuracy scores onto UMAP. Default = TRUE. plot_nearest Boolean value indicating whether plot accuracy score cluster's nearest neighboring cluster. relevant accuracy_scores TRUE. Defaults TRUE. ... Extra parameters passed Seurat::DimPlot().","code":""},{"path":"/reference/plotCHOIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimensional reduction plot with CHOIR clusters labeled — plotCHOIR","text":"ggplot object.","code":""},{"path":"/reference/pruneTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Prune clustering tree using random forest classifiers — pruneTree","title":"Prune clustering tree using random forest classifiers — pruneTree","text":"identify final set clusters, function move iteratively bottom prune provided hierarchical clustering tree using framework random forest classifiers permutation tests.","code":""},{"path":"/reference/pruneTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prune clustering tree using random forest classifiers — pruneTree","text":"","code":"pruneTree(   object,   key = \"CHOIR\",   alpha = NULL,   p_adjust = NULL,   feature_set = NULL,   exclude_features = NULL,   n_iterations = NULL,   n_trees = NULL,   use_variance = NULL,   min_accuracy = NULL,   min_connections = NULL,   max_repeat_errors = NULL,   distance_approx = NULL,   distance_awareness = 2,   collect_all_metrics = FALSE,   sample_max = NULL,   downsampling_rate = NULL,   min_reads = NULL,   normalization_method = NULL,   batch_correction_method = NULL,   batch_labels = NULL,   cluster_params = NULL,   use_assay = NULL,   countsplit = NULL,   countsplit_suffix = NULL,   cluster_tree = NULL,   input_matrix = NULL,   nn_matrix = NULL,   snn_matrix = NULL,   dist_matrix = NULL,   reduction = NULL,   n_cores = NULL,   random_seed = NULL,   verbose = TRUE )"},{"path":"/reference/pruneTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prune clustering tree using random forest classifiers — pruneTree","text":"object object class Seurat, SingleCellExperiment, ArchRProject. multi-omic data, recommend using ArchRProject objects. key name CHOIR-related data run stored object. Defaults “CHOIR”. alpha numerical value indicating significance level used permutation test comparisons cluster distinguishability. Defaults 0.05. Decreasing alpha value yield conservative clusters (fewer clusters) often decrease computational time required, fewer cluster comparisons may needed. p_adjust string indicating multiple comparison adjustment method use. Permitted values “bonferroni”, “fdr”, “none”. Defaults “bonferroni”. correction methods may less conservative, identifying clusters, CHOIR applies filters reduce total number tests performed. feature_set string indicating whether train random forest classifiers “” features variable (“var”) features. Defaults “var”. Computational time memory required may increase features used. Using features instead variable features may result conservative cluster calls. exclude_features character vector indicating features excluded input random forest classifier. Defaults NULL, means features excluded. parameter can used, example, exclude features correlated cell quality, mitochondrial genes. Failure exclude problematic features result clusters driven cell quality, -exclusion features reduce ability CHOIR distinguish cell populations differ features. n_iterations numerical value indicating number iterations run permutation test comparison. Increasing number iterations approximately linearly increase computational time required provide accurate estimation significance permutation test. Decreasing number iterations runs risk leading underclustering due lack statistical power. default value, 100 iterations, selected avoids underclustering, minimizing computational time diminishing returns running CHOIR additional iterations. n_trees numerical value indicating number trees random forest. Defaults 50. Increasing number trees likely increase computational time required. Though entirely predictable, increasing number trees point may enable nuanced distinctions, likely provide diminishing returns. use_variance Boolean value indicating whether use variance random forest accuracy scores part permutation test threshold. Defaults TRUE. Setting parameter FALSE make CHOIR considerably less conservative, identifying clusters, particularly large datasets. min_accuracy numerical value indicating minimum accuracy required random forest classifier, clusters automatically merged. Defaults 0.5, representing random chance probability assigning correct cluster labels; therefore, decreasing minimum accuracy recommended. Increasing minimum accuracy lead conservative cluster assignments often decrease computational time required, fewer cluster comparisons may needed. min_connections numerical value indicating minimum number nearest neighbors two clusters clusters considered adjacent. Non-adjacent clusters merged. Defaults 1. threshold allows CHOIR avoid running full permutation test comparison clusters highly likely distinct, saving computational time. Therefore, setting parameter 0 increase number permutation test comparisons run , thus, computational time. intent parameter avoid running permutation test comparisons clusters different merged. Therefore, recommend increasing parameter value beyond 10, higher values may result instances overclustering. max_repeat_errors numerical value indicating maximum number repeatedly mislabeled cells taken account permutation tests. parameter used account situations random forest classifier errors concentrated among cells repeatedly misassigned. set 0, repeat errors evaluated. Defaults 20. situations relatively infrequent, setting parameter lower values (especially 0) may result underclustering due small number intermediate cells. Setting parameter higher values may lead instances overclustering recommended. distance_approx Boolean value indicating whether use approximate distance calculations. Defaults TRUE, use centroid-based distances. Setting distance approximation FALSE substantially increase computational time memory required, particularly large datasets. Using approximated distances (TRUE) rather absolute distances (FALSE) unlikely meaningful effect distance thresholds imposed CHOIR. distance_awareness numerical value representing distance threshold cluster merge another cluster significance testing used. Specifically, value multiplier applied distance cluster closest distinguishable neighbor based random forest comparison. Defaults 2, sets threshold two-fold increase distance closest distinguishable neighbor. threshold allows CHOIR avoid running full permutation test comparison clusters highly likely distinct, saving computational time. omit distance calculations perform permutation testing comparisons, set parameter FALSE. Setting parameter FALSE increasing input value increase number permutation test comparisons run , thus, computational time. rare cases, small distant clusters may erroneously merged distance thresholds used. intent parameter avoid running permutation test comparisons clusters different merged. recommend decreasing parameter value 1.5, lower values may result instances overclustering. collect_all_metrics Boolean value indicating whether collect save additional metrics random forest classifiers, including feature importances every comparison. Defaults FALSE. Setting parameter TRUE slightly increase computational time required. parameter effect final cluster calls. sample_max numerical value indicating maximum number cells sampled per cluster train/test random forest classifier. Defaults Inf (infinity), cap number cells used, cells used comparisons. Decreasing parameter may decrease computational time required, may result instances underclustering. input provided downsampling_rate sample_max parameters, minimum resulting cell number calculated used comparison. downsampling_rate numerical value indicating proportion cells sampled per cluster train/test random forest classifier. efficiency, default value, \"auto\", sets downsampling rate according dataset size. Decreasing parameter may decrease computational time required, may also make final cluster calls conservative. input provided downsampling_rate sample_max parameters, minimum resulting cell number calculated used comparison. min_reads numeric value used filter features prior input random forest classifier. default value, NULL, filter features 0 counts current clusters compared. Higher values used caution, may increase signal--noise ratio encountered random forest classifiers. normalization_method character string vector indicating normalization method use. general, input data supplied CHOIR normalization, except user wishes use Seurat SCTransform normalization. Permitted values “none” “SCTransform”. Defaults “none”. CHOIR tested thoroughly SCTransform normalization, recommend approach time. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. batch_correction_method character string indicating batch correction method use. Permitted values “Harmony” “none”. Defaults “none”. Batch correction used different batches expected also unique cell types cell states. Using batch correction ensure clusters originate single batch, thereby making final cluster calls conservative. batch_labels character string , applying batch correction, specifies name column input object metadata containing batch labels. Defaults NULL. cluster_params list additional parameters passed Seurat function FindClusters clustering level tree. default, Seurat::FindClusters parameter group.singletons set TRUE, CHOIR relabels clusters singleton constitutes cluster. use_assay Seurat SingleCellExperiment objects, character string vector indicating assay(s) use provided object. default value, NULL, choose current active assay Seurat objects logcounts assay SingleCellExperiment objects. countsplit Boolean value indicating whether use count split input data (see countsplit package), one matrix counts used clustering tree generation separate matrix used random forest classifier permutation testing. Defaults FALSE. Enabling count splitting likely result conservative final cluster calls likely perform best datasets high read depths. countsplit_suffix character vector indicating suffixes distinguish two count split matrices used. Suffixes appended onto input string/vector parameter use_slot Seurat objects, use_assay SingleCellExperiment objects, ArchR_matrix ArchR objects. count splitting enabled, default value NULL uses suffixes \"_1\" \"_2\". cluster_tree optional dataframe containing cluster IDs cell across levels hierarchical clustering tree. Default = NULL use hierarchical clustering tree generation function buildTree(). input_matrix optional matrix containing feature x cell data provided user, train random forest classifiers. default, parameter set NULL, CHOIR look feature x cell matri(ces) indicated function buildTree. nn_matrix optional matrix containing nearest neighbor adjacency cells, provided user. default, parameter set NULL, CHOIR look adjacency matri(ces) generated function buildTree. snn_matrix optional matrix containing shared nearest neighbor adjacency cells, provided user. default, parameter set NULL, CHOIR look adjacency matri(ces) generated function buildTree. dist_matrix optional distance matrix cell cell distances (based dimensionality reduction cell embeddings), provided user. default, parameter set NULL, CHOIR look distance matri(ces) generated function buildTree. reduction optional matrix dimensionality reduction cell embeddings provided user subsequent clustering steps. default, parameter set NULL, CHOIR look dimensionality reductions generated function buildTree. n_cores numerical value indicating number cores use parallelization. default, CHOIR use number available cores minus 2. CHOIR parallelized computation permutation test iterations. Therefore, number cores number iterations theoretically decrease computational time required. practice, 8–16 cores recommended datasets 500,000 cells. random_seed numerical value indicating random seed used. Defaults 1. CHOIR uses randomization throughout generation pruning clustering tree. Therefore, changing random seed may yield slight differences final cluster assignments. verbose Boolean value indicating whether use verbose output execution CHOIR. Defaults TRUE, can set FALSE cleaner output.","code":""},{"path":"/reference/pruneTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prune clustering tree using random forest classifiers — pruneTree","text":"Returns object following added data stored provided key: clusters Final clusters stepwise cluster results progressive pruning step parameters Record parameter values used records Metadata recorded permutation test comparisons feature importance scores comparisons","code":""},{"path":"/reference/pruneTree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prune clustering tree using random forest classifiers — pruneTree","text":"CHOIR::buildTree() run prior function, parameters retrieved object. Alternately, parameter values can supplied. multi-modal data, optionally supply parameter inputs vectors/lists sequentially specify value modality.","code":""},{"path":"/reference/runCHOIRumap.html","id":null,"dir":"Reference","previous_headings":"","what":"Run UMAP on CHOIR dimensionality reductions — runCHOIRumap","title":"Run UMAP on CHOIR dimensionality reductions — runCHOIRumap","text":"Simplifies running Seurat::RunUMAP() CHOIR clustering automatically fetching pre-generated dimensionality reductions.","code":""},{"path":"/reference/runCHOIRumap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run UMAP on CHOIR dimensionality reductions — runCHOIRumap","text":"","code":"runCHOIRumap(object, key = \"CHOIR\", reduction = NULL, verbose = TRUE)"},{"path":"/reference/runCHOIRumap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run UMAP on CHOIR dimensionality reductions — runCHOIRumap","text":"object object class Seurat, SingleCellExperiment, ArchRProject undergone CHOIR clustering. multi-omic data, recommend using ArchRProject objects. key name CHOIR-related data run stored object. Defaults “CHOIR”. reduction character vector indicating CHOIR subtree dimensionality reduction run UMAP (e.g., 'P0_reduction', 'P1_reduction'). Default = NULL run UMAP dimensionality reductions generated CHOIR stored provided key. verbose Boolean value indicating whether use verbose output execution CHOIR. Defaults TRUE, can set FALSE cleaner output.","code":""},{"path":"/reference/runCHOIRumap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run UMAP on CHOIR dimensionality reductions — runCHOIRumap","text":"Returns object following added data stored provided key: reduction Cell embeddings calculated dimensionality reductions","code":""},{"path":"/reference/runCountSplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Run countsplitting — runCountSplit","title":"Run countsplitting — runCountSplit","text":"Fetches specified count matri(ces) provided input object, generates countsplit matrices using function countsplit::countsplit() . Neufeld, stores matrices back object suffixes provided 'countsplit_suffix'.","code":""},{"path":"/reference/runCountSplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run countsplitting — runCountSplit","text":"","code":"runCountSplit(   object,   key = \"CHOIR\",   use_assay = NULL,   use_slot = NULL,   ArchR_matrix = NULL,   countsplit_suffix = c(\"_1\", \"_2\"),   countsplit_params = list(),   normalization_method = \"log\",   verbose = TRUE )"},{"path":"/reference/runCountSplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run countsplitting — runCountSplit","text":"object object class Seurat, SingleCellExperiment, ArchRProject. multi-omic data, recommend using ArchRProject objects. key name CHOIR-related data run stored object. Defaults “CHOIR”. use_assay Seurat SingleCellExperiment objects, character string vector indicating assay(s) use provided object. default value, NULL, choose current active assay Seurat objects logcounts assay SingleCellExperiment objects. use_slot Seurat objects, character string vector indicating layers(s) — previously known slot(s) — use provided object. Default = NULL use 'counts' slot. ArchR_matrix ArchR objects, character string vector indicating matrix matrices use provided object. default value, NULL, use “GeneScoreMatrix” ATAC-seq data “GeneExpressionMatrix” RNA-seq data. multi-omic datasets, provide vector value corresponding modality. countsplit_suffix character vector indicating suffixes distinguish two count split matrices used. Suffixes appended onto input string/vector parameter use_slot Seurat objects, use_assay SingleCellExperiment objects, ArchR_matrix ArchR objects. Default value NULL uses suffixes \"_1\" \"_2\". countsplit_params list additional parameters passed countsplit::countsplit(). normalization_method character string vector indicating normalization method apply countsplitting. Permitted values 'none', 'log', 'tfidf'. Defaults 'log'. multi-omic datasets, provide vector value corresponding provided value use_assay ArchR_matrix order. verbose Boolean value indicating whether use verbose output execution CHOIR. Defaults TRUE, can set FALSE cleaner output.","code":""},{"path":"/reference/runCountSplit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run countsplitting — runCountSplit","text":"Returns object including newly generated countsplit matrices following added data stored provided key: parameters Record parameter values used","code":""},{"path":"/news/index.html","id":"choir-020","dir":"Changelog","previous_headings":"","what":"CHOIR 0.2.0","title":"CHOIR 0.2.0","text":"Improved compatibility Seurat v5 SingleCellExperiment","code":""}]
